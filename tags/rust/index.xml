<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Megh's Blog</title><link>http://meghprkh.github.io/blog/tags/rust/</link><description>Recent content in Rust on Megh's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Jul 2022 14:03:51 +0100</lastBuildDate><atom:link href="http://meghprkh.github.io/blog/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>BTrait - Combining Traits</title><link>http://meghprkh.github.io/blog/posts/btrait-cpp-combining-traits/</link><pubDate>Fri, 29 Jul 2022 14:03:51 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/btrait-cpp-combining-traits/</guid><description>&lt;p>In the &lt;a href="http://meghprkh.github.io/blog/posts/btrait-cpp-rust-like-traits/">previous post&lt;/a>, we looked at how to define and implement simple traits&lt;/p>
&lt;p>In this post we will look at how to combine them and pass them around, as that is what makes them really powerful. Otherwise each of them is quite basic on their own.&lt;/p></description></item><item><title>BTrait - Rust Like Traits in C++</title><link>http://meghprkh.github.io/blog/posts/btrait-cpp-rust-like-traits/</link><pubDate>Thu, 28 Jul 2022 10:15:46 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/btrait-cpp-rust-like-traits/</guid><description>&lt;p>I love Rust. Rust&amp;rsquo;s traits are powerful yet easy-to-use abstractions. C++ interfaces are similar but not quite there. What if there was a way to implement Rust-like traits in C++? Enter &lt;strong>BTrait&lt;/strong> - a design pattern / header-library.&lt;/p>
&lt;p>&lt;em>Have I BTrayed Rust by implementing BTrait? Read on to find out more&amp;hellip; drumrolls&amp;hellip;&lt;/em> (Okay no more puns now)&lt;/p></description></item><item><title>BTrait Introduction</title><link>http://meghprkh.github.io/blog/posts/btrait-introduction/</link><pubDate>Mon, 25 Jul 2022 10:15:46 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/btrait-introduction/</guid><description>&lt;p>&lt;strong>THIS IS A DRAFT POST&lt;/strong>&lt;/p>
&lt;p>I love Rust. Rust&amp;rsquo;s traits are powerful yet easy-to-use abstractions. C++ abstract classes and concepts are quite similar. C++ also has type traits and other traits like iterator traits. In this post I will introduce a simple Rust trait and implement this in C++. I will refer to this design pattern / header-library as BTrait.&lt;/p>
&lt;p>&lt;em>Have I BTrayed Rust by implementing BTrait? Read on to find out more&amp;hellip; drumrolls&amp;hellip;&lt;/em> (Okay no more puns now)&lt;/p></description></item></channel></rss>