<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Megh's Blog</title><link>http://meghprkh.github.io/blog/</link><description>Recent content on Megh's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 29 Jul 2022 14:03:51 +0100</lastBuildDate><atom:link href="http://meghprkh.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>BTrait - Combining Traits</title><link>http://meghprkh.github.io/blog/posts/btrait-cpp-combining-traits/</link><pubDate>Fri, 29 Jul 2022 14:03:51 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/btrait-cpp-combining-traits/</guid><description>&lt;p>In the &lt;a href="http://meghprkh.github.io/blog/posts/btrait-cpp-rust-like-traits/">previous post&lt;/a>, we looked at how to define and implement simple traits&lt;/p>
&lt;p>In this post we will look at how to combine them and pass them around, as that is what makes them really powerful. Otherwise each of them is quite basic on their own.&lt;/p></description></item><item><title>BTrait - Rust Like Traits in C++</title><link>http://meghprkh.github.io/blog/posts/btrait-cpp-rust-like-traits/</link><pubDate>Thu, 28 Jul 2022 10:15:46 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/btrait-cpp-rust-like-traits/</guid><description>&lt;p>I love Rust. Rust&amp;rsquo;s traits are powerful yet easy-to-use abstractions. C++ interfaces are similar but not quite there. What if there was a way to implement Rust-like traits in C++? Enter &lt;strong>BTrait&lt;/strong> - a design pattern / header-library.&lt;/p>
&lt;p>&lt;em>Have I BTrayed Rust by implementing BTrait? Read on to find out more&amp;hellip; drumrolls&amp;hellip;&lt;/em> (Okay no more puns now)&lt;/p></description></item><item><title>GSoC Summary</title><link>http://meghprkh.github.io/blog/posts/gsoc-summary/</link><pubDate>Mon, 22 Aug 2016 17:11:26 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/gsoc-summary/</guid><description>This post is meant to serve as a summary of work I did during GSoC. You may directly wish to skip to the links section
The Goal The goal to be achieved was to be able to play both single player and multiplayer emulated games using a gamepad in GNOME Games
Where are we right now Plug-n-play gamepad support: We use the SDL mappings format and thus reuse a huge community DB of mappings to provide this.</description></item><item><title>The state of gamepad support in Games</title><link>http://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/</link><pubDate>Fri, 22 Jul 2016 01:32:16 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/</guid><description>&lt;p>Gamepad support has now been merged into &lt;a href="https://wiki.gnome.org/Design/Playground/Games">GNOME Games&lt;/a> &lt;a href="https://github.com/Kekun/gnome-games/commit/c110c0390f40821779f2663bde50027b1f9f1acd">v3.21.4&lt;/a> !!! This means that you can play your favorite retro games using a gamepad!!!&lt;/p></description></item><item><title>Adventures with the Meson Build System and a GTK Playground</title><link>http://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/</link><pubDate>Mon, 11 Jul 2016 01:00:04 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/</guid><description>&lt;p>This post describes some of my experience with the &lt;a href="http://mesonbuild.com/" title="Meson Build">Meson Build&lt;/a> system. Also I have created a playground for GTK which I use to create simple protoypes with some functionality. The really nice thing about Meson is its &lt;em>python-ish&lt;/em>/&lt;em>lua-ish&lt;/em> syntax. The other thing is that it is &lt;em>really&lt;/em> fast.&lt;/p></description></item><item><title>GSoC - Progress so far</title><link>http://meghprkh.github.io/blog/posts/gsoc-progress-so-far/</link><pubDate>Sun, 26 Jun 2016 18:58:22 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/gsoc-progress-so-far/</guid><description>My project is about adding gamepad support to GNOME Games. This means that soon you would be able to play your favorite retro games using a gamepad!
Currently you can plugin a gamepad and it will just work! The app will automatically detect it and allow you to play your favorite game using the gamepad. Support for playing multiplayer games is also there. The Games branch which supports gamepads can be found here.</description></item><item><title>Handling joysticks and gamepads in linux</title><link>http://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/</link><pubDate>Fri, 03 Jun 2016 22:28:52 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/</guid><description>&lt;p>In this post I would share some of the things I came across when dealing with
the handling of joysticks and gamepads in Linux. One of the goals I wanted to
achieve was to make our controller mappings compatible with the SDL ones so that
we can reuse the community maintained controller mapping database that they have.&lt;/p></description></item><item><title>GSoC 2016: Introduction</title><link>http://meghprkh.github.io/blog/posts/gsoc-2016-introduction/</link><pubDate>Mon, 23 May 2016 17:49:03 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/gsoc-2016-introduction/</guid><description>&lt;p>Hello everyone, I am participating in Google Summer Of Code 2016 under the GNOME project.&lt;/p>
&lt;p>My project is related to an application called &lt;a href="https://wiki.gnome.org/Apps/Games/">GNOME Games&lt;/a>. As you can see this app serves as an catalog of games alongside an emulator. My proposal is related to adding support for gamepads/joysticks/controllers to this app. By this I mean the ability to play emulated games using the gamepad.&lt;/p></description></item><item><title>Creating an RPM package for a PHP PEAR module</title><link>http://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/</link><pubDate>Wed, 17 Dec 2014 12:19:38 +0000</pubDate><guid>http://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/</guid><description>I am participating in Google Code In 2014 and two of my tasks were based on RPM packaging for Fedora.
The first was packaging PhalconPHP for Fedora while the second was packaging CakePHP.
Phalcon is an C extension while Cake is a PEAR/Composer extension.
I will discuss the easier of the two, Cake as it was a PEAR package.
So first of all, you need to learn some RPM Packaging Basics.</description></item><item><title>About</title><link>http://meghprkh.github.io/blog/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://meghprkh.github.io/blog/about/</guid><description>Hello, I am Megh. I currently do some C++ and Rust and used to do a lot of Javascript previously.
I also love gamedev, Math and playing story-rich/puzzle games.
I studied Computer Science &amp;amp; Engineering at IIIT, Hyderabad.
You can contact me via my site or my github profile</description></item></channel></rss>