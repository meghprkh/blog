<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>Megh&#39;s Blog</title>
	<subtitle>Ramblings and dumb ideas</subtitle>
	<link href="https://meghprkh.github.io/blog/feed/feed.xml" rel="self"/>
	<link href="https://meghprkh.github.io/blog/"/>
	<updated>2025-04-05T13:40:20Z</updated>
	<id>https://meghprkh.github.io/</id>
	<author>
		<name>Megh Parikh</name>
		<email></email>
	</author>
	
	<entry>
		<title>Rust Traits - Associated Types and Generic Traits</title>
		<link href="https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/"/>
		<updated>2025-04-05T13:40:20Z</updated>
		<id>https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/</id>
		<content type="html">&lt;p&gt;Rust&#39;s traits have a nifty feature called &lt;a href=&quot;https://doc.rust-lang.org/stable/book/ch20-02-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types&quot;&gt;Associated Types&lt;/a&gt;. Rust&#39;s traits can also have &lt;a href=&quot;https://doc.rust-lang.org/stable/book/ch20-02-advanced-traits.html#default-generic-type-parameters-and-operator-overloading&quot;&gt;Generic Type Parameters&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post delves into some differences between the two, whether both are needed and my mental model of these concepts.&lt;/p&gt;
&lt;p&gt;I am not a Rust pro, and came across this while relearning traits. Please let me know your comments!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;are-both-features-needed&quot; tabindex=&quot;-1&quot;&gt;Are both features needed? &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/#are-both-features-needed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Rust book itself asks this question:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Associated types might seem like a similar concept to generics, in that the latter allow us to define a function without specifying what types it can
handle. To examine the difference between the two concepts, weâ€™ll look at an implementation of the Iterator trait on a type named Counter that
specifies the Item type is u32:&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This syntax seems comparable to that of generics. So why not just define the Iterator trait with generics, as shown in Listing 20-14?&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;cite&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/book/ch20-02-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types&quot;&gt;(From the Rust Book)&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It further states that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The difference is that when using generics, as in Listing 20-14, we must annotate the types in each implementation; because we can also implement Iterator&lt;String&gt; for Counter or any other type, we could have multiple implementations of Iterator for Counter. In other words, when a trait has a generic parameter, it can be implemented for a type multiple times, changing the concrete types of the generic type parameters each time. When we use the next method on Counter, we would have to provide type annotations to indicate which implementation of Iterator we want to use.&lt;/String&gt;&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;(From the Rust Book)&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;trait-inferring-works-even-for-generic-traits&quot; tabindex=&quot;-1&quot;&gt;Trait inferring - works even for generic traits &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/#trait-inferring-works-even-for-generic-traits&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Part of the above statement is is not true. The following works without explicit qualification of the trait:&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6InRyYWl0IE15VHJhaXQ8VD4ge1xuICAgIGZuIGZpcnN0X2VsZW1lbnQoJnNlbGYpIC0%2BIE9wdGlvbjxUPjtcbn1cbmltcGwgTXlUcmFpdDxpNjQ%2BIGZvciBWZWM8aTY0PiB7XG4gICAgZm4gZmlyc3RfZWxlbWVudCgmc2VsZikgLT4gT3B0aW9uPGk2ND4geyBOb25lIH1cbn1cbmZuIG1haW4oKSB7XG4gICAgbGV0IHYgPSB2ZWMhWzEsIDIsIDNdO1xuICAgIHByaW50bG4hKFwiezo%2FfVwiLCB2LmZpcnN0X2VsZW1lbnQoKSk7XG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;MyTrait&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyTrait&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus if you have a generic type, and only one implementation of it, Rust is able to do a name-based lookup for it. This is similar to how it does name-based lookup for traits in the first place, i.e. on noticing &lt;code&gt;v.first_element()&lt;/code&gt;, it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Analyzes the type of the object the method is being called on, i.e. &lt;code&gt;v&lt;/code&gt; -&amp;gt; &lt;code&gt;Vec&amp;lt;i64&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List traits implemented for it, i.e. &lt;code&gt;Index, MyTrait&lt;/code&gt; and so on&lt;/li&gt;
&lt;li&gt;See if any of them have the matching method call, i.e. &lt;code&gt;first_element()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If there are multiple matches, error out with an ambiguous match error&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;uniqueness-constraint&quot; tabindex=&quot;-1&quot;&gt;Uniqueness constraint &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/#uniqueness-constraint&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;However, with associated types, the useful contract that a trait can only be implemented once for a type remains. I.e, the following is possible with generic traits but not with associated types.&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6InRyYWl0IE15VHJhaXQ8VD4ge1xuICAgIGZuIGZpcnN0X2VsZW1lbnQoJnNlbGYpIC0%2BIE9wdGlvbjxUPjtcbn1cbmltcGwgTXlUcmFpdDxpNjQ%2BIGZvciBWZWM8aTY0PiB7XG4gICAgZm4gZmlyc3RfZWxlbWVudCgmc2VsZikgLT4gT3B0aW9uPGk2ND4geyBOb25lIH1cbn1cbmltcGwgTXlUcmFpdDx1NjQ%2BIGZvciBWZWM8aTY0PiB7XG4gICAgZm4gZmlyc3RfZWxlbWVudCgmc2VsZikgLT4gT3B0aW9uPHU2ND4geyBOb25lIH1cbn1cbmZuIG1haW4oKSB7XG4gICAgbGV0IHYgPSB2ZWMhWzEsIDIsIDNdO1xuLy8gTmVlZCB0byBkaXNhbWJpZ3VhdGUgdGhlIHRyYWl0IHRvIGJlIGNhbGxlZFxucHJpbnRsbiEoXCJ7Oj99XCIsIE15VHJhaXQ6OjxpNjQ%2BOjpmaXJzdF9lbGVtZW50KCZ2KSk7XG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyTrait&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyTrait&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;u64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;None&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Need to disambiguate the trait to be called&lt;/span&gt;
&lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyTrait&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, are there other differences?&lt;/p&gt;
&lt;h2 id=&quot;more-differences-returning-trait-objects&quot; tabindex=&quot;-1&quot;&gt;More differences - returning trait objects &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/#more-differences-returning-trait-objects&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s assume we want to define &lt;code&gt;vec_iter&lt;/code&gt; which wraps &lt;code&gt;vec.iter()&lt;/code&gt; such that we can&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token macro property&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the case of associated types, we can specify the trait without specifying the associated type.&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6Ii8vIFZhbGlkIHRvIG9ubHkgc3BlY2lmeSBJdGVyYXRvciB3aXRob3V0IGl0cyBhc3NvY2lhdGVkIHR5cGUgSXRlbVxuZm4gdmVjX2l0ZXIoeDogJlZlYzxpNjQ%2BKSAtPiBpbXBsIEl0ZXJhdG9yICsgJ18geyB4Lml0ZXIoKSB9XG5mbiBtYWluKCkge1xuICAgIGxldCB2ID0gdmVjIVsxLCAyLCAzXTtcbi8vIFZhbGlkIHRvIGNhbGwgdGhpc1xubGV0IF8gPSB2ZWNfaXRlcih2KTtcbn0ifV19&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Valid to only specify Iterator without its associated type Item&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&#39;_&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Valid to call this&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; _ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This itself is not very useful in most cases, as using it would have caused an error&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6Ii8vIFZhbGlkIHRvIG9ubHkgc3BlY2lmeSBJdGVyYXRvciB3aXRob3V0IGl0cyBhc3NvY2lhdGVkIHR5cGUgSXRlbVxuZm4gdmVjX2l0ZXIoeDogJlZlYzxpNjQ%2BKSAtPiBpbXBsIEl0ZXJhdG9yICsgJ18geyB4Lml0ZXIoKSB9XG5mbiBtYWluKCkge1xuICAgIGxldCB2ID0gdmVjIVsxLCAyLCAzXTtcblxuLy8gSW52YWxpZCBhcyB0eXBlIG9mIHggaXMgXCJvcGFxdWVcIlxuZm9yIHggaW4gdmVjX2l0ZXIoJnYpIHtcbiAgICBwcmludGxuIShcInt9XCIsIHgpO1xuICAgIC8vIF4gZXJyb3JbRTAyNzddOiBgPGltcGwgSXRlcmF0b3IgYXMgSXRlcmF0b3I%2BOjpJdGVtYCBkb2Vzbid0IGltcGxlbWVudCBgc3RkOjpmbXQ6OkRpc3BsYXlgXG59XG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token lifetime-annotation symbol&quot;&gt;&#39;_&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Invalid as type of x is &quot;opaque&quot;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; x &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ^ error[E0277]: `&amp;lt;impl Iterator as Iterator&gt;::Item` doesn&#39;t implement `std::fmt::Display`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returning a dyn of a trait is invalid when associated types are not specified&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6Ii8vIFZhbGlkIHRvIG9ubHkgc3BlY2lmeSBJdGVyYXRvciB3aXRob3V0IGl0cyBhc3NvY2lhdGVkIHR5cGUgSXRlbVxuZm4gdmVjX2l0ZXIoeDogJlZlYzxpNjQ%2BKSAtPiBkeW4gSXRlcmF0b3IgeyB4Lml0ZXIoKSB9XG4vLyBlcnJvcltFMDE5MV06IHRoZSB2YWx1ZSBvZiB0aGUgYXNzb2NpYXRlZCB0eXBlIGBJdGVtYCAoZnJvbSB0cmFpdCBgSXRlcmF0b3JgKSBtdXN0IGJlIHNwZWNpZmllZFxuZm4gbWFpbigpIHtcbiAgICBsZXQgdiA9IHZlYyFbMSwgMiwgM107XG4vLyBmcmFnbWVudCByZXR1cm5faXRlcmF0b3Jcbi8vIEludmFsaWQgYXMgdHlwZSBvZiB4IGlzIFwib3BhcXVlXCJcbmZvciB4IGluIHZlY19pdGVyKCZ2KSB7XG4gICAgcHJpbnRsbiEoXCJ7fVwiLCB4KTtcbiAgICAvLyBeIGVycm9yW0UwMjc3XTogYDxpbXBsIEl0ZXJhdG9yIGFzIEl0ZXJhdG9yPjo6SXRlbWAgZG9lc24ndCBpbXBsZW1lbnQgYHN0ZDo6Zm10OjpEaXNwbGF5YFxufVxuLy8gZW5kZnJhZ21lbnQgcmV0dXJuX2l0ZXJhdG9yXG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;dyn&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// error[E0191]: the value of the associated type `Item` (from trait `Iterator`) must be specified&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Returning a generic trait is also (understandably) invalid&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6InRyYWl0IE15VHJhaXQ8VD4ge1xuICAgIGZuIGZpcnN0X2VsZW1lbnQoJnNlbGYpIC0%2BIE9wdGlvbjxUPjtcbn1cbmltcGwgTXlUcmFpdDxpNjQ%2BIGZvciBWZWM8aTY0PiB7XG4gICAgZm4gZmlyc3RfZWxlbWVudCgmc2VsZikgLT4gT3B0aW9uPGk2ND4geyBOb25lIH1cbn1cbmZuIHZlY19pdGVyKHg6ICZWZWM8aTY0PikgLT4gaW1wbCBNeVRyYWl0IHsgeC5maXJzdF9lbGVtZW50KCkgfVxuICAgIC8vIF4gZXJyb3JbRTAxMDddOiBtaXNzaW5nIGdlbmVyaWNzIGZvciB0cmFpdCBgTXlUcmFpdGBcbmZuIG1haW4oKSB7fSJ9XX0%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;vec_iter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;i64&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyTrait&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;first_element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// ^ error[E0107]: missing generics for trait `MyTrait`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus even in the above case, specifying the associated type is necessary in most cases.&lt;/p&gt;
&lt;h2 id=&quot;more-differences-multiple-associated-types&quot; tabindex=&quot;-1&quot;&gt;More differences - multiple associated types &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/#more-differences-multiple-associated-types&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the case of atrait having multiple associated types, it is valid to associate only one of them and use it.&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoicnVzdCIsImNvbXBpbGVycyI6W3siaWQiOiJyMTYyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6InIxNjIwIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6InRyYWl0IE15VHJhaXQge1xuICAgIHR5cGUgQTtcbiAgICB0eXBlIEI7XG5cbiAgICBmbiBkb3VibGVfYSgmc2VsZiwgYTogU2VsZjo6QSkgLT4gU2VsZjo6QTtcbiAgICBmbiBkb3VibGVfYigmc2VsZiwgYjogU2VsZjo6QikgLT4gU2VsZjo6Qjtcbn1cblxuc3RydWN0IEV4YW1wbGVTdHJ1Y3Q7XG5pbXBsIE15VHJhaXQgZm9yIEV4YW1wbGVTdHJ1Y3Qge1xuICAgIHR5cGUgQSA9IHUzMjtcbiAgICB0eXBlIEIgPSBmMzI7XG5cbiAgICBmbiBkb3VibGVfYSgmc2VsZiwgYTogU2VsZjo6QSkgLT4gU2VsZjo6QSB7IGEgKiAyIH1cbiAgICBmbiBkb3VibGVfYigmc2VsZiwgYjogU2VsZjo6QikgLT4gU2VsZjo6QiB7IGIgKiAyLjAgfVxufVxuXG5mbiBleGFtcGxlX2ZuKCkgLT4gaW1wbCBNeVRyYWl0PEEgPSB1MzI%2BIHsgRXhhbXBsZVN0cnVjdHt9IH1cblxuZm4gbWFpbigpIHtcbiAgICBsZXQgeCA9IGV4YW1wbGVfZm4oKTtcbiAgICBwcmludGxuIShcInt9XCIsIHguZG91YmxlX2EoMikpO1xuICAgIHByaW50bG4hKFwie31cIiwgeC5kb3VibGVfYigyLjApKTtcbiAgICAvLyBlcnJvcltFMDI3N106IGA8aW1wbCBNeVRyYWl0PEEgPSB1MzI%2BIGFzIE15VHJhaXQ%2BOjpCYCBkb2Vzbid0IGltcGxlbWVudCBgc3RkOjpmbXQ6OkRpc3BsYXlgXG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;MyTrait&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;double_a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;double_b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;example_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyTrait&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;u32&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExampleStruct&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function-definition function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;example_fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;double_a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token macro property&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;double_b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// error[E0277]: `&amp;lt;impl MyTrait&amp;lt;A = u32&gt; as MyTrait&gt;::B` doesn&#39;t implement `std::fmt::Display`&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This does not seem as useful as traits are intended to be &amp;quot;small / composable&amp;quot;, so if you have multiple associated types, you are likely using all of them or none of them.&lt;/p&gt;
&lt;h2 id=&quot;my-mental-model&quot; tabindex=&quot;-1&quot;&gt;My mental model &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/rust-traits-associated-types-generic-traits/#my-mental-model&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;I believe that there is only one real difference between them is the single implementation of a trait constraint.&lt;/li&gt;
&lt;li&gt;For usage, you should treat them as generic traits everywhere. Always specify the associated types. Thus this difference only affects trait implementors.&lt;/li&gt;
&lt;li&gt;According to me, a slightly more intuitive syntax would be something that consistently enforces associated type specification in usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;details&gt;
&lt;summary&gt;My unpolished syntax alternative&lt;/summary&gt;
&lt;p&gt;What about something like?&lt;/p&gt;
&lt;pre class=&quot;language-rust&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-rust&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// no type statement, it becomes a generic argument consistenly&lt;/span&gt;
	require unique implementation &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Iterator&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vector&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;ToPairs&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Item2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	require unique implementation &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Item1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Item2&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;token type-definition class-name&quot;&gt;NDShape&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;PerimeterUnit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AreaUnit&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;token comment&quot;&gt;// PerimeterUnit &amp;amp; AreaUnit are associated types, but BaseUnit is not&lt;/span&gt;
	require unique implementation &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;BaseUnit&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(I admit its not great though)&lt;/p&gt;
&lt;p&gt;Aside: In nightly, there is &lt;code&gt;#![feature(associated_type_defaults)]&lt;/code&gt; which affects trait implementors, not users, by providing defaults for associated types.&lt;/p&gt;
&lt;/details&gt;
</content>
	</entry>
	
	<entry>
		<title>Force Inline in C++</title>
		<link href="https://meghprkh.github.io/blog/posts/c++-force-inline/"/>
		<updated>2022-09-03T23:28:10Z</updated>
		<id>https://meghprkh.github.io/blog/posts/c++-force-inline/</id>
		<content type="html">&lt;p&gt;Non-inlined function calls can be expensive. The compiler would not treat the body of the caller and the callee in the same basic block and thus not be able to apply certain optimizations. This is not an issue as the compiler does a pretty good job at inlining mostly, but if you are calling a function in a big loop you might want to ensure that the compiler always inlines it. &lt;code&gt;inline&lt;/code&gt;, &lt;code&gt;always_inline&lt;/code&gt; and &lt;code&gt;forceinline&lt;/code&gt; are just hints. They dont always inline &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Example of some libraries that do these &lt;a href=&quot;https://gitlab.freedesktop.org/mesa/mesa/-/merge_requests/18807&quot;&gt;mesa&lt;/a&gt;, &lt;a href=&quot;https://github.com/fastfloat/fast_float/blob/main/include/fast_float/float_common.h#L77-L81&quot;&gt;fastfloat&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Trust the compiler some say. Profile your code say the others. Use macros say the old and wise.&lt;/p&gt;
&lt;p&gt;But what if you are developing a library and need to ensure that your method gets inlined? You cant say trust the compiler, because the users want to trust your library. You cant profile the code, because the application isn&#39;t your code.&lt;/p&gt;
&lt;p&gt;We want a &lt;code&gt;FORCE_INLINE&lt;/code&gt; keyword that &lt;em&gt;just works&lt;/em&gt;, at least on the three major compilers - &lt;code&gt;g++&lt;/code&gt;, &lt;code&gt;clang&lt;/code&gt; and &lt;code&gt;msvc&lt;/code&gt;. If it cant inline, it should error in a meaningful way.&lt;/p&gt;
&lt;p&gt;The example:&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;decrement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; x &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Putting our &lt;code&gt;FORCE_INLINE&lt;/code&gt; keyword in front of &lt;code&gt;decrement&lt;/code&gt; should inline.&lt;/p&gt;
&lt;p&gt;It should either compile-time error or link-time error if put it in front of &lt;code&gt;factorial&lt;/code&gt; (as the recursion depth / input argument is not known at compile-time).&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#if defined(__clang__)
#define FORCE_INLINE [[gnu::always_inline]] [[gnu::gnu_inline]] extern inline

#elif defined(__GNUC__)
#define FORCE_INLINE [[gnu::always_inline]] inline

#elif defined(_MSC_VER)
#pragma warning(error: 4714)
#define FORCE_INLINE __forceinline

#else
#error Unsupported compiler
#endif&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the link-error / clang linker error part is a bit shady and most people would not want to adopt it unless working in somewhat close collaboration. You can remove the &lt;code&gt;[[gnu::gnu_inline]] extern&lt;/code&gt; part.&lt;/p&gt;
&lt;p&gt;Now lets check it in action:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Compiler&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Working case&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Error case&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Error type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Clang&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImNsYW5nMTQwMCJ9XSwiZXhlY3V0b3JzIjpbeyJhcmd1bWVudHMiOiJhIGIgYyBkIGUiLCJjb21waWxlciI6eyJpZCI6ImNsYW5nMTQwMCJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaWYgZGVmaW5lZChfX2NsYW5nX18pXG4jZGVmaW5lIEZPUkNFX0lOTElORSBbW2dudTo6YWx3YXlzX2lubGluZV1dIFtbZ251OjpnbnVfaW5saW5lXV0gZXh0ZXJuIGlubGluZVxuI2VsaWYgZGVmaW5lZChfX0dOVUNfXylcbiNkZWZpbmUgRk9SQ0VfSU5MSU5FIFtbZ251OjphbHdheXNfaW5saW5lXV0gaW5saW5lXG4jZWxpZiBkZWZpbmVkKF9NU0NfVkVSKVxuI3ByYWdtYSB3YXJuaW5nKGVycm9yOiA0NzE0KVxuI2RlZmluZSBGT1JDRV9JTkxJTkUgX19mb3JjZWlubGluZVxuI2Vsc2VcbiNlcnJvciBVbnN1cHBvcnRlZCBjb21waWxlclxuI2VuZGlmXG5cbkZPUkNFX0lOTElORSBpbnQgZGVjcmVtZW50KGludCB4KSB7IHJldHVybiB4IC0gMTsgfVxuaW50IGZhY3RvcmlhbChpbnQgeCkgeyByZXR1cm4gKHggPT0gMCkgPyAxIDogeCAqIGZhY3RvcmlhbCh4IC0gMSk7IH1cblxuaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiogYXJndikge1xuICAgIC8vIEV4ZWN1dGVkIHdpdGggYXJncyBcImEgYiBjIGQgZVwiLCBzaG91bGQgcmV0dXJuIDEyMCBub3JtYWxseVxuICAgIHJldHVybiBmYWN0b3JpYWwoZGVjcmVtZW50KGFyZ2MpKTtcbn0ifV19&quot;&gt;clang_working&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImNsYW5nMTQwMCJ9XSwiZXhlY3V0b3JzIjpbeyJhcmd1bWVudHMiOiJhIGIgYyBkIGUiLCJjb21waWxlciI6eyJpZCI6ImNsYW5nMTQwMCJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaWYgZGVmaW5lZChfX2NsYW5nX18pXG4jZGVmaW5lIEZPUkNFX0lOTElORSBbW2dudTo6YWx3YXlzX2lubGluZV1dIFtbZ251OjpnbnVfaW5saW5lXV0gZXh0ZXJuIGlubGluZVxuI2VsaWYgZGVmaW5lZChfX0dOVUNfXylcbiNkZWZpbmUgRk9SQ0VfSU5MSU5FIFtbZ251OjphbHdheXNfaW5saW5lXV0gaW5saW5lXG4jZWxpZiBkZWZpbmVkKF9NU0NfVkVSKVxuI3ByYWdtYSB3YXJuaW5nKGVycm9yOiA0NzE0KVxuI2RlZmluZSBGT1JDRV9JTkxJTkUgX19mb3JjZWlubGluZVxuI2Vsc2VcbiNlcnJvciBVbnN1cHBvcnRlZCBjb21waWxlclxuI2VuZGlmXG5cbkZPUkNFX0lOTElORSBpbnQgZGVjcmVtZW50KGludCB4KSB7IHJldHVybiB4IC0gMTsgfVxuRk9SQ0VfSU5MSU5FIGludCBmYWN0b3JpYWwoaW50IHgpIHsgcmV0dXJuICh4ID09IDApID8gMSA6IHggKiBmYWN0b3JpYWwoeCAtIDEpOyB9XG5cbmludCBtYWluKGludCBhcmdjLCBjaGFyICoqIGFyZ3YpIHtcbiAgICAvLyBFeGVjdXRlZCB3aXRoIGFyZ3MgXCJhIGIgYyBkIGVcIiwgc2hvdWxkIHJldHVybiAxMjAgbm9ybWFsbHlcbiAgICByZXR1cm4gZmFjdG9yaWFsKGRlY3JlbWVudChhcmdjKSk7XG59In1dfQ%3D%3D&quot;&gt;clang_error&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Linker error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;GCC&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImcxMjEifV0sImV4ZWN1dG9ycyI6W3siYXJndW1lbnRzIjoiYSBiIGMgZCBlIiwiY29tcGlsZXIiOnsiaWQiOiJnMTIxIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6IiNpZiBkZWZpbmVkKF9fY2xhbmdfXylcbiNkZWZpbmUgRk9SQ0VfSU5MSU5FIFtbZ251OjphbHdheXNfaW5saW5lXV0gW1tnbnU6OmdudV9pbmxpbmVdXSBleHRlcm4gaW5saW5lXG4jZWxpZiBkZWZpbmVkKF9fR05VQ19fKVxuI2RlZmluZSBGT1JDRV9JTkxJTkUgW1tnbnU6OmFsd2F5c19pbmxpbmVdXSBpbmxpbmVcbiNlbGlmIGRlZmluZWQoX01TQ19WRVIpXG4jcHJhZ21hIHdhcm5pbmcoZXJyb3I6IDQ3MTQpXG4jZGVmaW5lIEZPUkNFX0lOTElORSBfX2ZvcmNlaW5saW5lXG4jZWxzZVxuI2Vycm9yIFVuc3VwcG9ydGVkIGNvbXBpbGVyXG4jZW5kaWZcblxuRk9SQ0VfSU5MSU5FIGludCBkZWNyZW1lbnQoaW50IHgpIHsgcmV0dXJuIHggLSAxOyB9XG5pbnQgZmFjdG9yaWFsKGludCB4KSB7IHJldHVybiAoeCA9PSAwKSA%2FIDEgOiB4ICogZmFjdG9yaWFsKHggLSAxKTsgfVxuXG5pbnQgbWFpbihpbnQgYXJnYywgY2hhciAqKiBhcmd2KSB7XG4gICAgLy8gRXhlY3V0ZWQgd2l0aCBhcmdzIFwiYSBiIGMgZCBlXCIsIHNob3VsZCByZXR1cm4gMTIwIG5vcm1hbGx5XG4gICAgcmV0dXJuIGZhY3RvcmlhbChkZWNyZW1lbnQoYXJnYykpO1xufSJ9XX0%3D&quot;&gt;gcc_working&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImcxMjEifV0sImV4ZWN1dG9ycyI6W3siYXJndW1lbnRzIjoiYSBiIGMgZCBlIiwiY29tcGlsZXIiOnsiaWQiOiJnMTIxIn0sImNvbXBpbGVyT3V0cHV0VmlzaWJsZSI6InRydWUifV0sInNvdXJjZSI6IiNpZiBkZWZpbmVkKF9fY2xhbmdfXylcbiNkZWZpbmUgRk9SQ0VfSU5MSU5FIFtbZ251OjphbHdheXNfaW5saW5lXV0gW1tnbnU6OmdudV9pbmxpbmVdXSBleHRlcm4gaW5saW5lXG4jZWxpZiBkZWZpbmVkKF9fR05VQ19fKVxuI2RlZmluZSBGT1JDRV9JTkxJTkUgW1tnbnU6OmFsd2F5c19pbmxpbmVdXSBpbmxpbmVcbiNlbGlmIGRlZmluZWQoX01TQ19WRVIpXG4jcHJhZ21hIHdhcm5pbmcoZXJyb3I6IDQ3MTQpXG4jZGVmaW5lIEZPUkNFX0lOTElORSBfX2ZvcmNlaW5saW5lXG4jZWxzZVxuI2Vycm9yIFVuc3VwcG9ydGVkIGNvbXBpbGVyXG4jZW5kaWZcblxuRk9SQ0VfSU5MSU5FIGludCBkZWNyZW1lbnQoaW50IHgpIHsgcmV0dXJuIHggLSAxOyB9XG5GT1JDRV9JTkxJTkUgaW50IGZhY3RvcmlhbChpbnQgeCkgeyByZXR1cm4gKHggPT0gMCkgPyAxIDogeCAqIGZhY3RvcmlhbCh4IC0gMSk7IH1cblxuaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiogYXJndikge1xuICAgIC8vIEV4ZWN1dGVkIHdpdGggYXJncyBcImEgYiBjIGQgZVwiLCBzaG91bGQgcmV0dXJuIDEyMCBub3JtYWxseVxuICAgIHJldHVybiBmYWN0b3JpYWwoZGVjcmVtZW50KGFyZ2MpKTtcbn0ifV19&quot;&gt;gcc_error&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Compile error&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;MSVC&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6InZjcHBfdjE5X2xhdGVzdF94NjQiLCJvcHRpb25zIjoiL09iMSJ9XSwiZXhlY3V0b3JzIjpbeyJhcmd1bWVudHMiOiJhIGIgYyBkIGUiLCJjb21waWxlciI6eyJpZCI6InZjcHBfdjE5X2xhdGVzdF94NjQiLCJvcHRpb25zIjoiL09iMSJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaWYgZGVmaW5lZChfX2NsYW5nX18pXG4jZGVmaW5lIEZPUkNFX0lOTElORSBbW2dudTo6YWx3YXlzX2lubGluZV1dIFtbZ251OjpnbnVfaW5saW5lXV0gZXh0ZXJuIGlubGluZVxuI2VsaWYgZGVmaW5lZChfX0dOVUNfXylcbiNkZWZpbmUgRk9SQ0VfSU5MSU5FIFtbZ251OjphbHdheXNfaW5saW5lXV0gaW5saW5lXG4jZWxpZiBkZWZpbmVkKF9NU0NfVkVSKVxuI3ByYWdtYSB3YXJuaW5nKGVycm9yOiA0NzE0KVxuI2RlZmluZSBGT1JDRV9JTkxJTkUgX19mb3JjZWlubGluZVxuI2Vsc2VcbiNlcnJvciBVbnN1cHBvcnRlZCBjb21waWxlclxuI2VuZGlmXG5cbkZPUkNFX0lOTElORSBpbnQgZGVjcmVtZW50KGludCB4KSB7IHJldHVybiB4IC0gMTsgfVxuaW50IGZhY3RvcmlhbChpbnQgeCkgeyByZXR1cm4gKHggPT0gMCkgPyAxIDogeCAqIGZhY3RvcmlhbCh4IC0gMSk7IH1cblxuaW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiogYXJndikge1xuICAgIC8vIEV4ZWN1dGVkIHdpdGggYXJncyBcImEgYiBjIGQgZVwiLCBzaG91bGQgcmV0dXJuIDEyMCBub3JtYWxseVxuICAgIHJldHVybiBmYWN0b3JpYWwoZGVjcmVtZW50KGFyZ2MpKTtcbn0ifV19&quot;&gt;msvc_working&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6InZjcHBfdjE5X2xhdGVzdF94NjQiLCJvcHRpb25zIjoiL09iMSJ9XSwiZXhlY3V0b3JzIjpbeyJhcmd1bWVudHMiOiJhIGIgYyBkIGUiLCJjb21waWxlciI6eyJpZCI6InZjcHBfdjE5X2xhdGVzdF94NjQiLCJvcHRpb25zIjoiL09iMSJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaWYgZGVmaW5lZChfX2NsYW5nX18pXG4jZGVmaW5lIEZPUkNFX0lOTElORSBbW2dudTo6YWx3YXlzX2lubGluZV1dIFtbZ251OjpnbnVfaW5saW5lXV0gZXh0ZXJuIGlubGluZVxuI2VsaWYgZGVmaW5lZChfX0dOVUNfXylcbiNkZWZpbmUgRk9SQ0VfSU5MSU5FIFtbZ251OjphbHdheXNfaW5saW5lXV0gaW5saW5lXG4jZWxpZiBkZWZpbmVkKF9NU0NfVkVSKVxuI3ByYWdtYSB3YXJuaW5nKGVycm9yOiA0NzE0KVxuI2RlZmluZSBGT1JDRV9JTkxJTkUgX19mb3JjZWlubGluZVxuI2Vsc2VcbiNlcnJvciBVbnN1cHBvcnRlZCBjb21waWxlclxuI2VuZGlmXG5cbkZPUkNFX0lOTElORSBpbnQgZGVjcmVtZW50KGludCB4KSB7IHJldHVybiB4IC0gMTsgfVxuRk9SQ0VfSU5MSU5FIGludCBmYWN0b3JpYWwoaW50IHgpIHsgcmV0dXJuICh4ID09IDApID8gMSA6IHggKiBmYWN0b3JpYWwoeCAtIDEpOyB9XG5cbmludCBtYWluKGludCBhcmdjLCBjaGFyICoqIGFyZ3YpIHtcbiAgICAvLyBFeGVjdXRlZCB3aXRoIGFyZ3MgXCJhIGIgYyBkIGVcIiwgc2hvdWxkIHJldHVybiAxMjAgbm9ybWFsbHlcbiAgICByZXR1cm4gZmFjdG9yaWFsKGRlY3JlbWVudChhcmdjKSk7XG59In1dfQ%3D%3D&quot;&gt;msvc_error&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Compile error (requires optimization flag)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;How it works:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GCC would generate an error if it cant &lt;code&gt;always_inline&lt;/code&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Clang:
&lt;ul&gt;
&lt;li&gt;Does not generate an error for non-inlinable &lt;code&gt;always_inline&lt;/code&gt; functions. &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn1&quot; id=&quot;fnref1:1&quot;&gt;[1:1]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Instead &lt;code&gt;gnu_inline&lt;/code&gt; and &lt;code&gt;extern inline&lt;/code&gt; forces it to not generate any code for the function &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn4&quot; id=&quot;fnref4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn5&quot; id=&quot;fnref5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Thus give a linker error if it is not inlined&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;MSVC:
&lt;ul&gt;
&lt;li&gt;Generates a warning for for non-inlinable &lt;code&gt;__forceinline&lt;/code&gt; functions&lt;/li&gt;
&lt;li&gt;But only if compiled with any &amp;quot;inline expansion&amp;quot; optimization (&lt;code&gt;/Ob&amp;lt;n&amp;gt;&lt;/code&gt;) &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn2&quot; id=&quot;fnref2:1&quot;&gt;[2:1]&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;This is present with &lt;code&gt;/O1&lt;/code&gt; or &lt;code&gt;/O2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We promote this warning to an error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: do not use this with virtual functions. You can&#39;t &amp;quot;force inline&amp;quot; them as they need to be pointed to at runtime.&lt;/p&gt;
&lt;p&gt;GCC summarizes this as &amp;quot;An Inline Function is As Fast As a Macro&amp;quot; &lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fn5&quot; id=&quot;fnref5:1&quot;&gt;[5:1]&lt;/a&gt;&lt;/sup&gt;. Zig provides something similar as its &lt;a href=&quot;https://ziglang.org/documentation/0.9.1/#Functions&quot;&gt;&lt;code&gt;callconv(.Inline)&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thus we can and should build syntactic sugar as functions instead of weird macros. Without any worries of performance.&lt;/p&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://clang.llvm.org/docs/AttributeReference.html#always-inline-force-inline&quot;&gt;https://clang.llvm.org/docs/AttributeReference.html#always-inline-force-inline&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref1&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref1:1&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/cpp/cpp/inline-functions-cpp&quot;&gt;https://docs.microsoft.com/en-us/cpp/cpp/inline-functions-cpp&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref2&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref2:1&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#always_inline&quot;&gt;https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html#always_inline&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref3&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn4&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://clang.llvm.org/docs/AttributeReference.html#gnu-inline&quot;&gt;https://clang.llvm.org/docs/AttributeReference.html#gnu-inline&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref4&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn5&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://gcc.gnu.org/onlinedocs/gcc/Inline.html&quot;&gt;https://gcc.gnu.org/onlinedocs/gcc/Inline.html&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref5&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt; &lt;a href=&quot;https://meghprkh.github.io/blog/posts/c++-force-inline/#fnref5:1&quot; class=&quot;footnote-backref&quot;&gt;â†©ï¸Ž&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
	</entry>
	
	<entry>
		<title>C++20 Concepts in C++03</title>
		<link href="https://meghprkh.github.io/blog/posts/c++03-concepts/"/>
		<updated>2022-08-04T00:23:11Z</updated>
		<id>https://meghprkh.github.io/blog/posts/c++03-concepts/</id>
		<content type="html">&lt;p&gt;C++20 Concepts are a new language feature that ease generic programming, but are primarily syntactic sugar.&lt;/p&gt;
&lt;p&gt;We will try to implement them in C++03, with one caveat - we must &lt;em&gt;explicitly specify that a class implements an concept&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: We will use template specialization and do not need to be able to modify the class or our concept for this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If it seems like the caveat ignores the entire point of concepts, call these &amp;quot;pseudo-minimal-rust-traits&amp;quot; and read on. By the end of the article, as the Zen of Python mentions, I promise you will agree that explicit is better than implicit :P&lt;/p&gt;
&lt;h2 id=&quot;what-are-c-concepts&quot; tabindex=&quot;-1&quot;&gt;What are C++ Concepts &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/c++03-concepts/#what-are-c-concepts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++ Concepts allow us to do compile-time dispatch of methods.&lt;/p&gt;
&lt;p&gt;This compile-time dispatch is thus kind of like Rust traits. (Rust traits provide other features too.)&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKysyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKysyMCJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaW5jbHVkZSA8aW9zdHJlYW0%2BXG4jaW5jbHVkZSA8Y29uY2VwdHM%2BXG5cbi8vIERlZmluZSB0aGUgY29uY2VwdCBjaGVja1xudGVtcGxhdGUgPHR5cGVuYW1lIFNlbGY%2BXG5jb25jZXB0IENvdW50ZXIgPSByZXF1aXJlcyhTZWxmIGNvdW50ZXIsIGludCBuZXdfY291bnQpIHtcbiAgICB7IGNvdW50ZXIuZ2V0X2NvdW50KCkgfSAtPiBzdGQ6OnNhbWVfYXM8aW50PjtcbiAgICB7IGNvdW50ZXIuc2V0X2NvdW50KG5ld19jb3VudCkgfSAtPiBzdGQ6OnNhbWVfYXM8dm9pZD47XG4gICAgeyBTZWxmOjptYXhfY291bnQoKSB9IC0%2BIHN0ZDo6c2FtZV9hczxpbnQ%2BO1xufTtcblxuLy8gT3VyIHN0cnVjdFxuc3RydWN0IE15Q291bnRlciB7XG4gICAgaW50IGNvdW50O1xuXG4gICAgaW50IGdldF9jb3VudCgpIHsgcmV0dXJuIGNvdW50OyB9XG4gICAgdm9pZCBzZXRfY291bnQoaW50IG5ld19jb3VudCkgeyBjb3VudCA9IG5ld19jb3VudDsgfVxuICAgIHN0YXRpYyBpbnQgbWF4X2NvdW50KCkgeyByZXR1cm4gMTAwOyB9XG59O1xuc3RhdGljX2Fzc2VydChDb3VudGVyPE15Q291bnRlcj4pOyAvLyBvcHRpb25hbGx5IGNoZWNrIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGZvcmdvdCBhbnkgbWV0aG9kcywgZXRjLi4uXG5cbi8vIEV4YW1wbGUgdXNhZ2VcbnRlbXBsYXRlIDx0eXBlbmFtZSBUPlxucmVxdWlyZXMgQ291bnRlcjxUPlxudm9pZCBwcmludF9jb3VudGVyKFQmIGNvdW50ZXIpIHtcbiAgICAvLyBDYW4gYWxzbyB1c2Ugc2hvcnRoYW5kIGB0ZW1wbGF0ZSA8Q291bnRlciBUPmAgaW5zdGVhZCBvZiBgcmVxdWlyZXNgIGNsYXVzZVxuICAgIHN0ZDo6Y291dCA8PCBcIkNvdW50ZXIgd2l0aCBjb3VudCBcIiA8PCBjb3VudGVyLmdldF9jb3VudCgpIDw8IHN0ZDo6ZW5kbDtcbn1cblxuLy8gY29tcGlsZS10aW1lIGRpc3BhdGNoIGFub3RoZXIgbWV0aG9kXG52b2lkIHByaW50X2NvdW50ZXIoaW50IGNvdW50ZXIpIHtcbiAgICBzdGQ6OmNvdXQgPDwgXCJJbnRlZ2VyIGNvdW50ZXIgd2l0aCBjb3VudCBcIiA8PCBjb3VudGVyIDw8IHN0ZDo6ZW5kbDtcbn1cblxuLy8gU2hvcnRoYW5kIHN5bnRheFxudm9pZCBwcmludF9jb3VudGVyX3Nob3J0aGFuZChDb3VudGVyIGF1dG8gY291bnRlcikgeyBwcmludF9jb3VudGVyKGNvdW50ZXIpOyB9XG5cbmludCBtYWluKCkge1xuICAgIE15Q291bnRlciBjIHsgMjUgfTtcbiAgICBwcmludF9jb3VudGVyKGMpO1xuICAgIHByaW50X2NvdW50ZXIoMTApOyAvLyBQcmludHMgSW50ZWdlciBjb3VudGVyXG4gICAgcHJpbnRfY291bnRlcl9zaG9ydGhhbmQoYyk7XG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Define the concept check&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;concept&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Self counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; new_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;same_as&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;same_as&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;same_as&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Our struct&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyCounter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; new_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; new_count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;max_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Counter&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MyCounter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// optionally check implementation&lt;/span&gt;
                                   &lt;span class=&quot;token comment&quot;&gt;// if we forgot any methods, etc...&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example usage&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;requires&lt;/span&gt; Counter&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Can also use shorthand `template &amp;lt;Counter T&gt;` instead of `requires` clause&lt;/span&gt;
    std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Counter with count &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// compile-time dispatch another method&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Integer counter with count &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Shorthand syntax&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_counter_shorthand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Counter &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    MyCounter c &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Prints Integer counter&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print_counter_shorthand&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that we never needed to specify that &lt;code&gt;MyCounter&lt;/code&gt; implements &lt;code&gt;Counter&lt;/code&gt;. This can easily be fixed by requiring some constant to be defined in &lt;code&gt;MyCounter&lt;/code&gt; or otherwise.&lt;/p&gt;
&lt;p&gt;We call the above &lt;strong&gt;&amp;quot;implicit concepts&amp;quot;&lt;/strong&gt;. We will try to implement &lt;strong&gt;&amp;quot;explicit concepts&amp;quot;&lt;/strong&gt; - where something must specify that the concept has been implemented for a class.&lt;/p&gt;
&lt;h2 id=&quot;c-03-concepts&quot; tabindex=&quot;-1&quot;&gt;C++03 Concepts &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/c++03-concepts/#c-03-concepts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will use C++11 initially. Then will also modify this using some macros for C++03.&lt;/p&gt;
&lt;p&gt;We use a templated struct and observe that &lt;code&gt;static_asserts&lt;/code&gt; inside it are executed when the template is specialized.&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKysxMSJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKysxMSJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaW5jbHVkZSA8aW9zdHJlYW0%2BXG4jaW5jbHVkZSA8dHlwZV90cmFpdHM%2BXG5cbi8vIERlZmluZSB0aGUgY29uY2VwdFxuc3RydWN0IENvdW50ZXIge1xuICAgIC8vIFRoaXMgdGVtcGxhdGUgaXMgc3BlY2lhbGl6ZWQgdG8gdHJ1ZV90eXBlIGJ5IGFueSBjbGFzcyB0aGF0XG4gICAgLy8gaW1wbGVtZW50cyB0aGlzLiBTcGVjaWFsaXphdGlvbiByZXF1aXJlcyBvd25lcnNoaXAgb2YgbmVpdGhlclxuICAgIC8vIENvdW50ZXIgY29uY2VwdCBvciBTZWxmIChTZWxmIGJlaW5nIHRoZSBjbGFzcyBpbiBxdWVzdGlvbilcbiAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgU2VsZj5cbiAgICBzdHJ1Y3QgaXNfaW1wbGVtZW50ZWRfYnk6IHN0ZDo6ZmFsc2VfdHlwZSB7fTtcblxuICAgIC8vIERlZmluZSB0aGUgY2hlY2tcbiAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgU2VsZj5cbiAgICBzdHJ1Y3QgY2hlY2s6IHN0ZDo6dHJ1ZV90eXBlIHtcbiAgICAgICAgc3RhdGljX2Fzc2VydChzdGF0aWNfY2FzdDwgaW50IChTZWxmOjoqKSgpID4oJlNlbGY6OmdldF9jb3VudCkpO1xuICAgICAgICBzdGF0aWNfYXNzZXJ0KHN0YXRpY19jYXN0PCB2b2lkIChTZWxmOjoqKShpbnQpID4oJlNlbGY6OnNldF9jb3VudCkpO1xuICAgICAgICBzdGF0aWNfYXNzZXJ0KHN0YXRpY19jYXN0PCBpbnQgKCopKCkgPigmU2VsZjo6bWF4X2NvdW50KSk7XG4gICAgfTtcbn07XG5cbi8vIERlZmluZSBvdXIgc3RydWN0IG5vcm1hbGx5LCB3aXRob3V0IGFueSBtb2RpZmljYXRpb25zXG5zdHJ1Y3QgTXlDb3VudGVyIHtcbiAgICBpbnQgY291bnQ7XG5cbiAgICBpbnQgZ2V0X2NvdW50KCkgeyByZXR1cm4gY291bnQ7IH1cbiAgICB2b2lkIHNldF9jb3VudChpbnQgbmV3X2NvdW50KSB7IGNvdW50ID0gbmV3X2NvdW50OyB9XG4gICAgc3RhdGljIGludCBtYXhfY291bnQoKSB7IHJldHVybiAxMDA7IH1cbn07XG4vLyBEZWNsYXJlIGFuZCBjaGVjayB0aGF0IHdlIGhhdmUgaW1wbGVtZW50ZWQgdGhlIHRyYWl0XG50ZW1wbGF0ZTw%2BXG5zdHJ1Y3QgQ291bnRlcjo6aXNfaW1wbGVtZW50ZWRfYnk8TXlDb3VudGVyPjogQ291bnRlcjo6Y2hlY2s8TXlDb3VudGVyPiB7fTtcblxuLy8gRXhhbXBsZSB1c2FnZSB1c2luZyBjbGFzc2ljIGVuYWJsZV9pZiBTRklOQUUuIFZlcmJvc2UgeWV0IGNvbnZlbnRpb25hbFxudGVtcGxhdGUgPHR5cGVuYW1lIFQ%2BXG50eXBlbmFtZSBzdGQ6OmVuYWJsZV9pZjxcbiAgICBDb3VudGVyOjppc19pbXBsZW1lbnRlZF9ieTxUPjo6dmFsdWUsXG52b2lkID46OnR5cGVcbnByaW50X2NvdW50ZXIoVCYgY291bnRlcikge1xuICAgIHN0ZDo6Y291dCA8PCBcIkNvdW50ZXIgd2l0aCBjb3VudCBcIiA8PCBjb3VudGVyLmdldF9jb3VudCgpIDw8IHN0ZDo6ZW5kbDtcbn1cblxuLy8gY29tcGlsZS10aW1lIGRpc3BhdGNoIGFub3RoZXIgbWV0aG9kXG52b2lkIHByaW50X2NvdW50ZXIoaW50IGNvdW50ZXIpIHtcbiAgICBzdGQ6OmNvdXQgPDwgXCJJbnRlZ2VyIGNvdW50ZXIgd2l0aCBjb3VudCBcIiA8PCBjb3VudGVyIDw8IHN0ZDo6ZW5kbDtcbn1cblxuaW50IG1haW4oKSB7XG4gICAgTXlDb3VudGVyIGNvdW50ZXIgeyAyNSB9O1xuICAgIHByaW50X2NvdW50ZXIoY291bnRlcik7XG4gICAgcHJpbnRfY291bnRlcigxMCk7IC8vIFByaW50cyBJbnRlZ2VyIGNvdW50ZXJcbn0ifV19&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Define the concept&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// This template is specialized to true_type by any class that&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// implements this. Specialization requires ownership of neither&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// Counter concept or Self (Self being the class in question)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;is_implemented_by&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token base-clause&quot;&gt;std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;false_type&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Define the check&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token base-clause&quot;&gt;std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;true_type&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;get_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;set_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;max_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Define our struct normally, without any modifications&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;MyCounter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; new_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; new_count&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;max_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Declare and check that we have implemented the trait&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token base-clause&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;is_implemented_by&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyCounter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Counter&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;MyCounter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Example usage using classic enable_if SFINAE. Verbose yet conventional&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;enable_if&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;
    Counter&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;is_implemented_by&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;type
&lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;T&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Counter with count &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// compile-time dispatch another method&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;cout &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Integer counter with count &quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;endl&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    MyCounter counter &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// Prints Integer counter&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this in C++03, and make it work with C++11 too, lets sprinkle some macros.&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKyswMyJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKyswMyJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaW5jbHVkZSA8aW9zdHJlYW0%2BXG5cbiNpZiBfX2NwbHVzcGx1cyAhPSAxOTk3MTFMXG4jaW5jbHVkZSA8dHlwZV90cmFpdHM%2BXG4jZWxzZVxuLy8gTW9ua2V5IHBhdGNoIHN0ZCBmb3IgdGhlIHNha2Ugb2YgdGhlIGV4YW1wbGVcbi8vIENhbiB1c2UgeW91ciBmYXZvdXJpdGUgdXRpbGl0eSBsaWJyYXJ5IGluc3RlYWRcbm5hbWVzcGFjZSBzdGQge1xuICAgIHN0cnVjdCB0cnVlX3R5cGUgeyBzdGF0aWMgY29uc3QgYm9vbCB2YWx1ZSA9IHRydWU7IH07XG4gICAgc3RydWN0IGZhbHNlX3R5cGUgeyBzdGF0aWMgY29uc3QgYm9vbCB2YWx1ZSA9IHRydWU7IH07XG4gICAgdGVtcGxhdGUgPGJvb2wgQ29uZCwgdHlwZW5hbWUgVHlwZSA9IHZvaWQ%2BXG4gICAgc3RydWN0IGVuYWJsZV9pZiB7IHR5cGVkZWYgVHlwZSB0eXBlOyB9O1xuICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBUeXBlPlxuICAgIHN0cnVjdCBlbmFibGVfaWY8ZmFsc2UsIFR5cGU%2BIHsgfTtcbn1cbiNlbmRpZlxuXG4jZGVmaW5lIF9DT05DRVBUX1RPS0VOUEFTVEUoeCwgeSkgeCAjIyB5XG4jZGVmaW5lIF9DT05DRVBUX1RPS0VOUEFTVEUyKHgsIHkpIF9DT05DRVBUX1RPS0VOUEFTVEUoeCwgeSlcblxuI2lmIF9fY3BsdXNwbHVzICE9IDE5OTcxMUxcblxuI2RlZmluZSBDT05DRVBUX0NIRUNLX0JFR0lOIFxcXG4gICAgdGVtcGxhdGUgPHR5cGVuYW1lIFNlbGY%2BIFxcXG4gICAgc3RydWN0IGNoZWNrOiBzdGQ6OnRydWVfdHlwZSB7IFxcXG5cbiNkZWZpbmUgQ09OQ0VQVF9DSEVDS19FTkQgfTtcblxuI2RlZmluZSBDT05DRVBUX0FTU0VSVCBzdGF0aWNfYXNzZXJ0XG5cbiNkZWZpbmUgSU1QTF9DT05DRVBUKENPTkNFUFQsIENMUykgXFxcbiAgICB0ZW1wbGF0ZTw%2BIFxcXG4gICAgc3RydWN0IENPTkNFUFQ6OmlzX2ltcGxlbWVudGVkX2J5PENMUz46IENPTkNFUFQ6OmNoZWNrPENMUz4ge307IFxcXG5cbiNlbHNlXG5cbi8vIEluIEMrKzAzIHdlIGRvbnQgaGF2ZSBzdGF0aWNfYXNzZXJ0IGFuZCB3ZSBjYW5ub3QgdXNlIFwiJlQ6Om1ldGhvZFwiXG4vLyBpbnNpZGUgc2F5IGEgQk9PU1RfU1RBVElDX0FTU0VSVC5cbi8vIFdlIGp1c3QgZGVmaW5lIGFsbCBvZiB0aGUgY2hlY2tzIGluc2lkZSB0aGUgY29uc3RydWN0b3Igb2YgYGNoZWNrYC5cbi8vIFRoZW4gaW4gYElNUExfQ09OQ0VQVGAgd2UgaW5zdGFudGlhdGUgYSBzdGF0aWMgb2JqZWN0IG9mIHRoZSBzYW1lLlxuXG4jZGVmaW5lIENPTkNFUFRfQ0hFQ0tfQkVHSU4gXFxcbiAgICB0ZW1wbGF0ZSA8dHlwZW5hbWUgU2VsZj4gXFxcbiAgICBzdHJ1Y3QgY2hlY2s6IHN0ZDo6dHJ1ZV90eXBlIHsgXFxcbiAgICAgICAgY2hlY2soKSB7IFxcXG5cbiNkZWZpbmUgQ09OQ0VQVF9DSEVDS19FTkQgfSB9O1xuXG52b2lkIF9jb25jZXB0X2Fzc2VydChib29sKSB7fVxuI2RlZmluZSBDT05DRVBUX0FTU0VSVCBfY29uY2VwdF9hc3NlcnRcblxuI2RlZmluZSBJTVBMX0NPTkNFUFQoQ09OQ0VQVCwgQ0xTKSBcXFxuICAgIHRlbXBsYXRlPD4gXFxcbiAgICBzdHJ1Y3QgQ09OQ0VQVDo6aXNfaW1wbGVtZW50ZWRfYnk8Q0xTPjogQ09OQ0VQVDo6Y2hlY2s8Q0xTPiB7fTsgXFxcbiAgICBzdGF0aWMgQ09OQ0VQVDo6Y2hlY2s8Q0xTPiBfQ09OQ0VQVF9UT0tFTlBBU1RFMihfY29uY2VwdF9jaGVja18sIF9fTElORV9fKTsgXFxcblxuI2VuZGlmXG5cbi8vIERlZmluZSB0aGUgY29uY2VwdFxuc3RydWN0IENvdW50ZXIge1xuICAgIHRlbXBsYXRlIDx0eXBlbmFtZSBUPlxuICAgIHN0cnVjdCBpc19pbXBsZW1lbnRlZF9ieTogc3RkOjpmYWxzZV90eXBlIHt9O1xuXG4gICAgLy8gRGVmaW5lIHRoZSBjaGVja1xuICAgIENPTkNFUFRfQ0hFQ0tfQkVHSU5cbiAgICAgICAgQ09OQ0VQVF9BU1NFUlQoc3RhdGljX2Nhc3Q8IGludCAoU2VsZjo6KikoKSA%2BKCZTZWxmOjpnZXRfY291bnQpKTtcbiAgICAgICAgQ09OQ0VQVF9BU1NFUlQoc3RhdGljX2Nhc3Q8IHZvaWQgKFNlbGY6OiopKGludCkgPigmU2VsZjo6c2V0X2NvdW50KSk7XG4gICAgICAgIENPTkNFUFRfQVNTRVJUKHN0YXRpY19jYXN0PCBpbnQgKCopKCkgPigmU2VsZjo6bWF4X2NvdW50KSk7XG4gICAgQ09OQ0VQVF9DSEVDS19FTkRcbn07XG5cbi8vIERlZmluZSBvdXIgc3RydWN0XG5zdHJ1Y3QgTXlDb3VudGVyIHtcbiAgICBpbnQgY291bnQ7XG5cbiAgICBpbnQgZ2V0X2NvdW50KCkgeyByZXR1cm4gY291bnQ7IH1cbiAgICB2b2lkIHNldF9jb3VudChpbnQgbmV3X2NvdW50KSB7IGNvdW50ID0gbmV3X2NvdW50OyB9XG4gICAgc3RhdGljIGludCBtYXhfY291bnQoKSB7IHJldHVybiAxMDA7IH1cbn07XG4vLyAuLi4gc2tpcHBpbmcgZGVmaW5pdGlvbiBvZiBzdHJ1Y3QgTXlDb3VudGVyIC4uLlxuLy8gRGVjbGFyZSBhbmQgY2hlY2sgdGhhdCB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSB0cmFpdFxuSU1QTF9DT05DRVBUKENvdW50ZXIsIE15Q291bnRlcik7XG5cbi8vIEV4YW1wbGUgdXNhZ2UgdXNpbmcgY2xhc3NpYyBlbmFibGVfaWYgU0ZJTkFFXG50ZW1wbGF0ZSA8dHlwZW5hbWUgVD5cbnR5cGVuYW1lIHN0ZDo6ZW5hYmxlX2lmPFxuICAgIENvdW50ZXI6OmlzX2ltcGxlbWVudGVkX2J5PFQ%2BOjp2YWx1ZSxcbnZvaWQgPjo6dHlwZVxucHJpbnRfY291bnRlcihUJiBjb3VudGVyKSB7XG4gICAgc3RkOjpjb3V0IDw8IFwiQ291bnRlciB3aXRoIGNvdW50IFwiIDw8IGNvdW50ZXIuZ2V0X2NvdW50KCkgPDwgc3RkOjplbmRsO1xufVxuXG5pbnQgbWFpbigpIHtcbiAgICBNeUNvdW50ZXIgY291bnRlcjtcbiAgICBjb3VudGVyLmNvdW50ID0gMjU7XG4gICAgQ291bnRlcjo6Y2hlY2s8TXlDb3VudGVyPiB4O1xuICAgIHByaW50X2NvdW50ZXIoY291bnRlcik7XG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Define the concept&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;is_implemented_by&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token base-clause&quot;&gt;std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;false_type&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// Define the check&lt;/span&gt;
    CONCEPT_CHECK_BEGIN
        &lt;span class=&quot;token function&quot;&gt;CONCEPT_ASSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;get_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;CONCEPT_ASSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;set_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;CONCEPT_ASSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token generic-function&quot;&gt;&lt;span class=&quot;token function&quot;&gt;static_cast&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt;Self&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;max_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    CONCEPT_CHECK_END
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ... skipping definition of struct MyCounter ...&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Declare and check that we have implemented the trait&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;IMPL_CONCEPT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; MyCounter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now use this for defining &lt;code&gt;print_count&lt;/code&gt; using the same &lt;code&gt;enable_if&lt;/code&gt; way we used previously. Also most of our macros are simple ones that dont require any parenthesis-escaping except &lt;code&gt;IMPL_CONCEPT&lt;/code&gt;. Note these macros are completely optional in C++11.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;C++03 details and the macros&lt;/summary&gt;
&lt;p&gt;&lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt; can not take reference to a function (and &lt;code&gt;static_assert&lt;/code&gt; is C++11)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;source&amp;gt;:67:67: error: &#39;&amp;amp;&#39; cannot appear in a constant-expression
   67 |         BOOST_STATIC_ASSERT(static_cast&amp;lt; int (Self::*)() &amp;gt;(&amp;amp;Self::get_count));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We get around this by defining the &lt;code&gt;CONCEPT_ASSERT&lt;/code&gt; macro expands an empty function in C++03, and the &lt;code&gt;CONCEPT_CHECK_BEGIN&lt;/code&gt; defines the constructor of a &lt;code&gt;check&amp;lt;Self&amp;gt;&lt;/code&gt; struct. This object is then internal-linkage-constructed by &lt;code&gt;IMPL_CONCEPT&lt;/code&gt;. This ensures that the compiler tries to specialize the constructor with &lt;code&gt;Self&lt;/code&gt; and detects that the &lt;code&gt;static_cast&lt;/code&gt;s failed.&lt;/p&gt;
&lt;p&gt;Note the &lt;code&gt;CONCEPT_ASSERT&lt;/code&gt; macro should not be used for &amp;quot;normal&amp;quot;/non-method check asserts as it simply does nothing. Use say &lt;code&gt;BOOST_STATIC_ASSERT&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;See example preprocessor output &lt;a href=&quot;https://godbolt.org/z/vn9eKr6G1&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can check the compile time error because &lt;code&gt;get_count&lt;/code&gt; is commented out&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://godbolt.org/z/TY5ce3G9b&quot;&gt;Gcc 4.9&lt;/a&gt; (&lt;a href=&quot;https://godbolt.org/z/oca3efas4&quot;&gt;GCC 4.1.2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://godbolt.org/z/fnndG38cc&quot;&gt;Clang 3.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://godbolt.org/z/5xvnErG1v&quot;&gt;MSVC 19.14 (2017 - new but oldest on godbolt)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://godbolt.org/z/M1oT6na4v&quot;&gt;ICC 13.0.1 (2012)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/details&gt;
&lt;h2 id=&quot;aside-explicit-concepts-in-c-20&quot; tabindex=&quot;-1&quot;&gt;Aside: Explicit concepts in C++20 &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/c++03-concepts/#aside-explicit-concepts-in-c-20&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Explicit concepts can be implemented in pretty much the same way in C++20, using a templated &lt;code&gt;is_counter&lt;/code&gt; conditional struct&lt;/p&gt;
&lt;div class=&quot;code-play-button&quot;&gt;
    &lt;a href=&quot;https://godbolt.org/clientstate/eyJzZXNzaW9ucyI6W3siaWQiOjEsImxhbmd1YWdlIjoiYysrIiwiY29tcGlsZXJzIjpbeyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKysyMCJ9XSwiZXhlY3V0b3JzIjpbeyJjb21waWxlciI6eyJpZCI6ImcxMjEiLCJvcHRpb25zIjoiLXN0ZD1jKysyMCJ9LCJjb21waWxlck91dHB1dFZpc2libGUiOiJ0cnVlIn1dLCJzb3VyY2UiOiIjaW5jbHVkZSA8aW9zdHJlYW0%2BXG4jaW5jbHVkZSA8Y29uY2VwdHM%2BXG4jaW5jbHVkZSA8dHlwZV90cmFpdHM%2BXG5cbi8vIEV4cGxpY2l0IGNoZWNrXG50ZW1wbGF0ZSA8dHlwZW5hbWUgU2VsZj5cbnN0cnVjdCBpc19jb3VudGVyOiBzdGQ6OmZhbHNlX3R5cGUge307XG5cbi8vIERlZmluZSB0aGUgY29uY2VwdCBjaGVja1xudGVtcGxhdGUgPHR5cGVuYW1lIFNlbGY%2BXG5jb25jZXB0IENvdW50ZXIgPVxuICAgIGlzX2NvdW50ZXI8U2VsZj46OnZhbHVlICYmICAgICAgICAgICAgICAgLy8gKiogTkVXICoqXG4gICAgcmVxdWlyZXMoU2VsZiBjb3VudGVyLCBpbnQgbmV3X2NvdW50KSB7ICAvLyAqKiBTQU1FIFNUVUZGICoqXG4gICAgICAgIHsgY291bnRlci5nZXRfY291bnQoKSB9IC0%2BIHN0ZDo6c2FtZV9hczxpbnQ%2BO1xuICAgICAgICB7IGNvdW50ZXIuc2V0X2NvdW50KG5ld19jb3VudCkgfSAtPiBzdGQ6OnNhbWVfYXM8dm9pZD47XG4gICAgICAgIHsgU2VsZjo6bWF4X2NvdW50KCkgfSAtPiBzdGQ6OnNhbWVfYXM8aW50PjtcbiAgICB9O1xuXG4vLyBPdXIgc3RydWN0XG5zdHJ1Y3QgTXlDb3VudGVyIHtcbiAgICBpbnQgY291bnQ7XG5cbiAgICBpbnQgZ2V0X2NvdW50KCkgeyByZXR1cm4gY291bnQ7IH1cbiAgICB2b2lkIHNldF9jb3VudChpbnQgbmV3X2NvdW50KSB7IGNvdW50ID0gbmV3X2NvdW50OyB9XG4gICAgc3RhdGljIGludCBtYXhfY291bnQoKSB7IHJldHVybiAxMDA7IH1cbn07XG4vLyAuLi4gc2tpcHBpbmcgZGVmaW5pdGlvbiBvZiBzdHJ1Y3QgTXlDb3VudGVyIC4uLlxuLy8gRGVjbGFyZSBhbmQgY2hlY2sgdGhhdCB3ZSBoYXZlIGltcGxlbWVudGVkIHRoZSB0cmFpdFxudGVtcGxhdGUgPD4gc3RydWN0IGlzX2NvdW50ZXI8TXlDb3VudGVyPiA6IHN0ZDo6dHJ1ZV90eXBlIHt9O1xuc3RhdGljX2Fzc2VydChDb3VudGVyPE15Q291bnRlcj4pOyAvLyBvcHRpb25hbGx5IGNoZWNrIGltcGxlbWVudGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIHdlIGZvcmdvdCBhbnkgbWV0aG9kcywgZXRjLi4uXG5cbi8vIEV4YW1wbGUgdXNhZ2VcbnRlbXBsYXRlIDx0eXBlbmFtZSBUPlxucmVxdWlyZXMgQ291bnRlcjxUPlxudm9pZCBwcmludF9jb3VudGVyKFQmIGNvdW50ZXIpIHtcbiAgICAvLyBDYW4gYWxzbyB1c2Ugc2hvcnRoYW5kIGB0ZW1wbGF0ZSA8Q291bnRlciBUPmAgaW5zdGVhZCBvZiBgcmVxdWlyZXNgIGNsYXVzZVxuICAgIHN0ZDo6Y291dCA8PCBcIkNvdW50ZXIgd2l0aCBjb3VudCBcIiA8PCBjb3VudGVyLmdldF9jb3VudCgpIDw8IHN0ZDo6ZW5kbDtcbn1cblxuaW50IG1haW4oKSB7XG4gICAgTXlDb3VudGVyIGMgeyAyNSB9O1xuICAgIHByaW50X2NvdW50ZXIoYyk7XG59In1dfQ%3D%3D&quot; target=&quot;_blank&quot;&gt;&amp;#x25B6;&lt;/a&gt;
&lt;/div&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Explicit check&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;is_counter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token base-clause&quot;&gt;std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;false_type&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// Define the concept check&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;concept&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;
    is_counter&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;               &lt;span class=&quot;token comment&quot;&gt;// ** NEW **&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;requires&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Self counter&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; new_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;token comment&quot;&gt;// ** SAME STUFF **&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;same_as&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;new_count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;same_as&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;max_count&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&gt;&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;same_as&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// ... skipping definition of struct MyCounter ...&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// Declare and check that we have implemented the trait&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;is_counter&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MyCounter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;true_type &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static_assert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Counter&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;MyCounter&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// optionally check implementation&lt;/span&gt;
                                   &lt;span class=&quot;token comment&quot;&gt;// if we forgot any methods, etc...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;rant-on-c-20-concepts&quot; tabindex=&quot;-1&quot;&gt;Rant on C++20 Concepts &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/c++03-concepts/#rant-on-c-20-concepts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;C++20 Concepts thus allow for powerful implicit matching. But, let us take the following example:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Lets say we are building some kind of social media stats app and we have &lt;code&gt;youtube_api::VideoViewCounter&lt;/code&gt; and &lt;code&gt;instagram_api::LikeCounter&lt;/code&gt;. Both of them have the &lt;code&gt;get_count&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;We want to define a &lt;code&gt;print_count(counter)&lt;/code&gt; method which takes either of these two classes and does &lt;code&gt;std::cout &amp;lt;&amp;lt; counter.get_count()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We do not have control over either APIs, but would like a common abstraction. We can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Declare an &amp;quot;implicit concept&amp;quot; called &lt;code&gt;Counter&lt;/code&gt; which requires a &lt;code&gt;get_count&lt;/code&gt; method. Define templated &lt;code&gt;print_count&lt;/code&gt; for concept&lt;/li&gt;
&lt;li&gt;Declare an &amp;quot;explicit concept&amp;quot; with the same. Specify that the above two classes implement this concept without modying the classes. Define templated &lt;code&gt;print_count&lt;/code&gt; for concept.&lt;/li&gt;
&lt;li&gt;Use an unchecked templated &lt;code&gt;print_count&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now consider the following modification to the codebase:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We add class &lt;code&gt;my_shared_ptr&lt;/code&gt; which has &lt;code&gt;get_count&lt;/code&gt; method which returns the reference count of the pointer.&lt;/p&gt;
&lt;p&gt;Lets say another engineer started refactoring to store the objects in &lt;code&gt;shared_ptr&lt;/code&gt; but &lt;code&gt;print_counter&lt;/code&gt; has not been modified for an explicit overload for &lt;code&gt;shared_ptr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What happens when we call &lt;code&gt;print_count(counter_ptr)&lt;/code&gt; with &lt;code&gt;counter_ptr = my_shared_ptr&amp;lt;youtube_api::VideoViewCounter&amp;gt;()&lt;/code&gt;?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Note that:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In the case of &amp;quot;implicit concepts&amp;quot;, we would see the reference count being printed, without any compile or run-time error.&lt;/li&gt;
&lt;li&gt;In the case of &amp;quot;explicit concepts&amp;quot;, we would get a compile time error since no method matches this.&lt;/li&gt;
&lt;li&gt;In the case of an unchecked template too, we would see the reference count being printed too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, &lt;em&gt;implicit concepts are almost as bad as not having any check at all&lt;/em&gt;. Except maybe they can produce neater compiler errors (ignoring the case of overloading based on concepts).&lt;/p&gt;
&lt;p&gt;Even if you had a 1000 different classes, writing 1000 more lines saying that a concept is implemented by them is better than implicit behaviour in my opinion. In most cases you will either have 1000 template specializations or some script generated code, and in both cases you only need to add one line.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What regex is to parsing, implicit concepts are to C++.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if explicit concepts are better and already implementable in C++03, why provide an abstraction where most developers will write error-prone code instead of providing syntax sugar for explicit concepts?&lt;/p&gt;
&lt;h2 id=&quot;extra-syntactic-sugar-stuff&quot; tabindex=&quot;-1&quot;&gt;Extra syntactic sugar stuff &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/c++03-concepts/#extra-syntactic-sugar-stuff&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using C++20 Concepts with C++03 concepts&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;concept&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Counter_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Counter&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;is_implemented_by&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;print_counter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Counter_ &lt;span class=&quot;token keyword&quot;&gt;auto&lt;/span&gt; counter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Requiring multiple C++03 Concepts to be satisfied&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;typename&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; Trait&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;require_concepts&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token base-clause&quot;&gt;std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;conjunction&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; Trait&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;is_implemented_by&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Self&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

USE AS std&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;enable_if&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;require_concepts&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Cls&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Concept1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Concept2&lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Composing concepts - Using other concept checks in a check (slightly leaky abstraction for C++03)&lt;/p&gt;
&lt;pre class=&quot;language-cpp&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;CONCEPT_CHECK_BEGIN
  &lt;span class=&quot;token comment&quot;&gt;// Require other_concept to be implemented&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;other_concept&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;is_implemented_by&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;// Require either_concept1 or or_concept to be implemented&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;BOOST_STATIC_ASSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;either_concept1&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;is_implemented_by&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;value &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; or_concept2&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;is_implemented_by&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Self&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token double-colon punctuation&quot;&gt;::&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
CONCEPT_CHECK_END&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;summary&quot; tabindex=&quot;-1&quot;&gt;Summary &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/c++03-concepts/#summary&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw what C++ concepts were and how to write &amp;quot;explicit concepts&amp;quot; in C++03. We also noted that C++20 implicit concepts are error-prone.&lt;/p&gt;
&lt;p&gt;In the next post I will describe how this compares to Rust traits and how to implement &amp;quot;trait objects&amp;quot; or &amp;quot;concept maps&amp;quot; using the same code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: For any of the &amp;quot;predefined concepts&amp;quot; like say &lt;code&gt;copy_constructible&lt;/code&gt;, &lt;code&gt;type_traits&lt;/code&gt; or similar Boost/utility library can be used.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>GSoC Summary</title>
		<link href="https://meghprkh.github.io/blog/posts/gsoc-summary/"/>
		<updated>2016-08-22T17:11:26Z</updated>
		<id>https://meghprkh.github.io/blog/posts/gsoc-summary/</id>
		<content type="html">&lt;p&gt;This post is meant to serve as a summary of work I did during GSoC. You may directly wish to skip to the &lt;a href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#Links&quot;&gt;links section&lt;/a&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h1 id=&quot;the-goal&quot; tabindex=&quot;-1&quot;&gt;The Goal &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#the-goal&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;The goal to be achieved was to be able to play both single player and multiplayer emulated games using a gamepad in GNOME Games&lt;/p&gt;
&lt;h1 id=&quot;where-are-we-right-now&quot; tabindex=&quot;-1&quot;&gt;Where are we right now &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#where-are-we-right-now&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Plug-n-play gamepad support:&lt;/em&gt; We use the SDL mappings format and thus reuse a huge community DB of mappings to provide this.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Monitor plugin and unplugging of gamepads and react to it without user interaction:&lt;/em&gt; The user should not be forced to take unnecessary steps to use the gamepads.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multiplayer games/multiple gamepads support:&lt;/em&gt; While there is no GUI for this the current way is intuitive and easy to use. In fact, normally you won&#39;t have the need to use the GUI at all. &lt;a href=&quot;https://meghprkh.github.io/blog/2016/07/22/The-state-of-gamepad-support-in-Games/#Multiplayer-support&quot;&gt;More about this here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Separate codebase that can be reused (not a library yet):&lt;/em&gt; The codebase leaves under a separate directory and has no dependencies on the main codebase. In fact, initially it was developed under a different namespace. Also in the process a library - &lt;a href=&quot;https://github.com/meghprkh/libgamepad&quot;&gt;libgamepad&lt;/a&gt; had been created. But I couldnt find the time to keep it up-to-date. Nevertheless it is functional currently also.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;what-is-left-to-be-done&quot; tabindex=&quot;-1&quot;&gt;What is left to be done &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#what-is-left-to-be-done&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Intuitive GUI to remap gamepads when multiple gamepads are plugged in. Mockups had been created and discussed ad the final design is ready (more about this in a future blog post)! You can check the current progress &lt;a href=&quot;https://github.com/meghprkh/gnome-games/tree/dirty/feature/gamepad-select-ui-new&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;stretch-goals&quot; tabindex=&quot;-1&quot;&gt;Stretch Goals &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#stretch-goals&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I hope that I would be able to complete these during my winter vacation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a gamepad mapping creator UI (currently either Steam or SDL&#39;s controller map tool can be used for this)&lt;/li&gt;
&lt;li&gt;Update &lt;a href=&quot;https://github.com/meghprkh/libgamepad&quot;&gt;libgamepad&lt;/a&gt; to match the current codebase of Games.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;challenges&quot; tabindex=&quot;-1&quot;&gt;Challenges &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#challenges&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Evdev and the Joystick API:&lt;/em&gt; Initially WIP code had already been written by my mentor for the Joystick API and my project was to finish and polish that code. But later I came to know that the evdev API is the better API and that is what is used by all current libraries/programs (SDL/RetroArch). So I had to dig into the evdev API and start afresh.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;VAPI for libevdev:&lt;/em&gt; Vala requires us to create VAPIs for using C libraries (and you have to do it manually for non-Glib based ones). While creating the VAPI for libevdev I encountered a lot of challenges and got to know the Vala language much better.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Understanding the SDL codebase and the mappings format:&lt;/em&gt; Now we needed a good mappings database. So we thought that it would be better if we could reuse some already existing database. So we decided to adopt the SDL mappings format, but I had some difficulty initially understanding their format (especially the GUID). Also I took inspiration from the SDL code and adopted it but I faced some difficulty understanding their C code.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Multiplayer support:&lt;/em&gt; We needed an intuitive way which does not interfere with the user, i.e. we wanted a way to implement this so that the user will not have to do anything to play multiplayer games by default but if he wants he can configure the default assignment. After some brainstorming we decided on &lt;a href=&quot;https://meghprkh.github.io/blog/2016/07/22/The-state-of-gamepad-support-in-Games/#Multiplayer-support&quot;&gt;this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;some-technical-details&quot; tabindex=&quot;-1&quot;&gt;Some technical details &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#some-technical-details&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/2016/06/03/Handling-joysticks-and-gamepads-in-linux/&quot;&gt;Evdev&lt;/a&gt; was used using &lt;a href=&quot;https://www.freedesktop.org/software/libevdev/doc/latest/&quot;&gt;libevdev&lt;/a&gt; to handle gamepads&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Udev&quot;&gt;Udev&lt;/a&gt; was used using &lt;a href=&quot;https://wiki.gnome.org/Projects/libgudev&quot;&gt;GUdev&lt;/a&gt; for detecting plugging/unplugging of gamepads&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/spurious/SDL-mirror/blob/release-2.0.4/src/joystick/SDL_gamecontrollerdb.h#L26-L30&quot;&gt;SDL mappings format&lt;/a&gt; was used so that we have access to a large controller &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB&quot;&gt;mappings database&lt;/a&gt;. I even wrote a &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB/commits/master?author=meghprkh&quot;&gt;python script&lt;/a&gt; to validate the mappings and integrated with Travis so that the maintainer can easily merge the mappings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;links&quot; tabindex=&quot;-1&quot;&gt;Links &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-summary/#links&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Kekun/gnome-games/commits/master?author=meghprkh&quot;&gt;Add Gamepad support - commits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/2016/07/22/The-state-of-gamepad-support-in-Games/#Multiplayer-support&quot;&gt;Multiplayer support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meghprkh/libgamepad&quot;&gt;libgamepad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/meghprkh/gnome-games/tree/dirty/feature/gamepad-select-ui-new&quot;&gt;Multiple gamepads select UI WIP branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://meghprkh.github.io/blog/2016/06/03/Handling-joysticks-and-gamepads-in-linux/&quot;&gt;More details on the implemetation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB/commits/master?author=meghprkh&quot;&gt;Python script to check SDL controller DB&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>The state of gamepad support in Games</title>
		<link href="https://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/"/>
		<updated>2016-07-22T01:32:16Z</updated>
		<id>https://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/</id>
		<content type="html">&lt;p&gt;Gamepad support has now been merged into &lt;a href=&quot;https://wiki.gnome.org/Design/Playground/Games&quot;&gt;GNOME Games&lt;/a&gt; &lt;a href=&quot;https://github.com/Kekun/gnome-games/commit/c110c0390f40821779f2663bde50027b1f9f1acd&quot;&gt;v3.21.4&lt;/a&gt; !!! This means that you can play your favorite retro games using a gamepad!!!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;which-gamepads-are-supported&quot; tabindex=&quot;-1&quot;&gt;Which gamepads are supported? &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/#which-gamepads-are-supported&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But you may wondering which gamepads are supported out of the box. The answer is a &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB/blob/master/gamecontrollerdb.txt&quot;&gt;lot of them&lt;/a&gt;! We use the &lt;a href=&quot;https://github.com/spurious/SDL-mirror/blob/release-2.0.4/include/SDL_gamecontroller.h#L96-L108&quot;&gt;SDL mappings format&lt;/a&gt; to map your gamepad to a standard gamepad (by this I mean a seventh generation/XBox-360 kind of gamepad). And we use a huge community maintained &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB/blob/master/gamecontrollerdb.txt&quot;&gt;database&lt;/a&gt; of mappings, so your device would most likely be there. We use a slightly modified version of this database. See &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB/pull/94&quot;&gt;#94&lt;/a&gt; and &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB/pull/95&quot;&gt;#95&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;custom-mappings&quot; tabindex=&quot;-1&quot;&gt;Custom mappings? &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/#custom-mappings&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well I just realized while writing this post that we had forgotten about this :sweat_smile:. But I have made a &lt;a href=&quot;https://github.com/Kekun/gnome-games/pull/310&quot;&gt;PR&lt;/a&gt; for it, so it should get merged soon. But as of now there is no GUI for it. Currently you can use Steam or the SDL test/controllermap tool to generate a custom mapping string as described &lt;a href=&quot;https://github.com/spurious/SDL-mirror/blob/release-2.0.4/src/joystick/SDL_gamecontrollerdb.h#L26-L30&quot;&gt;here&lt;/a&gt;. Then you should paste in in a file in the user&#39;s config directory. As per this PR this file is &lt;code&gt;&amp;lt;config_dir&amp;gt;/gnome-games/gamecontrollerdb.txt&lt;/code&gt; (&lt;code&gt;&amp;lt;config_dir&amp;gt;&lt;/code&gt; is mostly &lt;code&gt;~/.config&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;multiplayer-support&quot; tabindex=&quot;-1&quot;&gt;Multiplayer support &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/#multiplayer-support&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Multiplayer games are quite well supported. As of now there is no GUI for reassigning gamepads to other players, but the default behaviour is quite predictable. Just plugin the gamepads in the order of the players and all will be well.&lt;/p&gt;
&lt;p&gt;The exact behaviour is this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the first player with no gamepad will be assigned the keyboard&lt;/li&gt;
&lt;li&gt;if there are &lt;em&gt;N&lt;/em&gt; initially plugged-in gamepads, then they are assigned to the first &lt;em&gt;N&lt;/em&gt; players and keyboard is assigned to player &lt;em&gt;N + 1&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;when a gamepad is plugged in, it is assigned to the first player with no gamepad (it may not be the last one), it can replace the keyboard&lt;/li&gt;
&lt;li&gt;when a gamepad is plugged out, its player shouldn&#39;t have any gamepad assigned but it shouldn&#39;t change the player to which other gamepads are assigned&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;next-steps&quot; tabindex=&quot;-1&quot;&gt;Next steps &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/the-state-of-gamepad-support-in-games/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The next steps involve adding a UI to remap the gamepads assigned too the players and then maybe a UI for remapping the controls if time permits.&lt;/p&gt;
&lt;p&gt;Happy gaming!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Adventures with the Meson Build System and a GTK Playground</title>
		<link href="https://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/"/>
		<updated>2016-07-11T01:00:04Z</updated>
		<id>https://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/</id>
		<content type="html">&lt;p&gt;This post describes some of my experience with the &lt;a href=&quot;http://mesonbuild.com/&quot; title=&quot;Meson Build&quot;&gt;Meson Build&lt;/a&gt; system. Also I have created a playground for GTK which I use to create simple protoypes with some functionality. The really nice thing about Meson is its &lt;em&gt;python-ish&lt;/em&gt;/&lt;em&gt;lua-ish&lt;/em&gt; syntax. The other thing is that it is &lt;em&gt;really&lt;/em&gt; fast.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2 id=&quot;my-experience&quot; tabindex=&quot;-1&quot;&gt;My experience &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/#my-experience&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As a newbie I found Automake unfriendly (maybe because of its primitive m4 macro system). So I was looking for something quick to learn for building my &lt;a href=&quot;https://github.com/meghprkh/libgamepad&quot; title=&quot;LibGamepad&quot;&gt;LibGamepad&lt;/a&gt; library. Initially I opted for the awesome &lt;a href=&quot;https://github.com/rastersoft/autovala&quot;&gt;Autovala&lt;/a&gt;. But then I realized that while super-easy, it was not flexible. I wanted conditional compilation (per-platform) but could not do it. Then while I was looking at the &lt;a href=&quot;https://cmake.org/&quot;&gt;CMake&lt;/a&gt; files generated by Autovala, they too felt kind of cryptic, so I decided to start from scratch and write the CMake files on my own. Still even CMake&#39;s syntax was kind of weird and &lt;em&gt;macro-ish&lt;/em&gt;. Then I tried a hand at Meson. Surprisingly I was able to easily build simple Vala programs without giving it much time.&lt;/p&gt;
&lt;h2 id=&quot;the-neat-language&quot; tabindex=&quot;-1&quot;&gt;The neat language &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/#the-neat-language&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In Meson, you feel like you are interacting with a higher-order language. You get immutable arrays and strings. Your interaction with the compiler modules is through objects. In short, &lt;em&gt;its just amazing&lt;/em&gt;. I could have elaborated this section and written some features, but then you can find it on the &lt;a href=&quot;https://github.com/mesonbuild/meson/wiki&quot;&gt;Meson Wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;some-reference-links&quot; tabindex=&quot;-1&quot;&gt;Some reference links &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/#some-reference-links&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tutorial: &lt;a href=&quot;https://github.com/mesonbuild/meson/wiki/Tutorial&quot;&gt;https://github.com/mesonbuild/meson/wiki/Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Indepth Tutorial: &lt;a href=&quot;https://github.com/mesonbuild/meson/wiki/IndepthTutorial&quot;&gt;https://github.com/mesonbuild/meson/wiki/IndepthTutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Vala example: &lt;a href=&quot;https://github.com/mesonbuild/meson/wiki/Vala&quot;&gt;https://github.com/mesonbuild/meson/wiki/Vala&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GNOME module: &lt;a href=&quot;https://github.com/mesonbuild/meson/wiki/Gnome-module&quot;&gt;https://github.com/mesonbuild/meson/wiki/Gnome-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reference Manual: &lt;a href=&quot;https://github.com/mesonbuild/meson/wiki/Reference-Manual&quot;&gt;https://github.com/mesonbuild/meson/wiki/Reference-Manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Note&lt;/em&gt;: On Fedora it is &lt;code&gt;ninja-build&lt;/code&gt; and not &lt;code&gt;ninja&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;a-gtk-playground-a-starter-kit&quot; tabindex=&quot;-1&quot;&gt;A GTK Playground / A starter kit &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/adventures-with-the-meson-build-system-and-a-gtk-playground/#a-gtk-playground-a-starter-kit&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ever want to prototype some mockup without fiddling with your main application? I created a small playground which I use for creating prototypes &lt;a href=&quot;https://github.com/meghprkh/valagtk&quot;&gt;https://github.com/meghprkh/valagtk&lt;/a&gt; . You can simply open &lt;a href=&quot;https://glade.gnome.org/&quot;&gt;Glade&lt;/a&gt;, create your prototype and add some interactivity using &lt;a href=&quot;https://blogs.gnome.org/tvb/2013/05/29/composite-templates-lands-in-vala/&quot;&gt;GtkTemplate&lt;/a&gt; in your Vala code and BOOM! This uses the Meson build system to give you an easy-to-extend starter along with super-fast builds.&lt;/p&gt;
&lt;p&gt;Please leave your comments in the comments section =).&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>GSoC - Progress so far</title>
		<link href="https://meghprkh.github.io/blog/posts/gsoc-progress-so-far/"/>
		<updated>2016-06-26T18:58:22Z</updated>
		<id>https://meghprkh.github.io/blog/posts/gsoc-progress-so-far/</id>
		<content type="html">&lt;p&gt;My project is about adding gamepad support to GNOME Games. This means that soon you would be able to play your favorite retro games using a gamepad!&lt;/p&gt;
&lt;p&gt;Currently you can plugin a gamepad and it will just work! The app will automatically detect it and allow you to play your favorite game using the gamepad. Support for playing multiplayer games is also there. The Games branch which supports gamepads can be found &lt;a href=&quot;https://github.com/meghprkh/gnome-games/tree/dirty/feature/gamepad-incremental&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id=&quot;how-its-being-done&quot; tabindex=&quot;-1&quot;&gt;How its being done &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-progress-so-far/#how-its-being-done&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To integrate gamepads a library was made. While currently this library is being developed as part of the GNOME Games codebase. Its developed under a different namespace. You can find the library code &lt;a href=&quot;https://github.com/meghprkh/libgamepad&quot;&gt;here&lt;/a&gt;. Please note that the API of this library is &lt;em&gt;unstable&lt;/em&gt; and will keep changing.&lt;/p&gt;
&lt;p&gt;This library is a small GLib-based library that is written in Vala and aims to be easy to use. While the long-term goal is to be cross-platform, currently it supports Linux only.&lt;/p&gt;
&lt;p&gt;The gamepad mapping format used is compatible with the &lt;a href=&quot;https://github.com/gabomdq/SDL_GameControllerDB&quot;&gt;SDL mappings&lt;/a&gt;. This means that you would be able to use many gamepads without requiring to configure them.&lt;/p&gt;
&lt;h2 id=&quot;whats-there-in-the-future&quot; tabindex=&quot;-1&quot;&gt;What&#39;s there in the future? &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-progress-so-far/#whats-there-in-the-future&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After some more cleanup, this code will hopefully be merged into the Games codebase. After that I will focus on adding UI for features like easy-assigning of gamepads to ports and remapping the gamepad.&lt;/p&gt;
&lt;p&gt;I will keep posting updates on this blog. Stay tuned!&lt;/p&gt;
&lt;h2 id=&quot;related-posts&quot; tabindex=&quot;-1&quot;&gt;Related posts &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/gsoc-progress-so-far/#related-posts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;gsoc-2016-introduction&lt;/li&gt;
&lt;li&gt;handling-joysticks-and-gamepads-in-linux&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Handling joysticks and gamepads in linux</title>
		<link href="https://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/"/>
		<updated>2016-06-03T22:28:52Z</updated>
		<id>https://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/</id>
		<content type="html">&lt;p&gt;In this post I would share some of the things I came across when dealing with
the handling of joysticks and gamepads in Linux. One of the goals I wanted to
achieve was to make our controller mappings compatible with the SDL ones so that
we can reuse the community maintained controller mapping database that they have.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;The full code can be found &lt;a href=&quot;https://gist.github.com/meghprkh/9cdce0cd4e0f41ce93413b250a207a55&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first thing that I want to clarify is that Linux provides &lt;em&gt;two&lt;/em&gt; APIs for
dealing with joysticks. One is the legacy &lt;em&gt;joystick&lt;/em&gt; API and the other is the
modern &lt;em&gt;evdev&lt;/em&gt; API. The evdev-based API provides more detailed information about
the buttons and axes available and SDL2 only supports the evdev API so we
decided to go with the evdev API.&lt;/p&gt;
&lt;p&gt;Quoting Arch Wiki:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/dev/input/jsX&lt;/code&gt; maps to the &#39;Joystick&#39; API interface and &lt;code&gt;/dev/input/event*&lt;/code&gt;
maps to the &#39;evdev&#39; ones (this also includes other input devices such as mice
and keyboards). Symbolic links to those devices are also available in
&lt;code&gt;/dev/input/by-id/&lt;/code&gt; and &lt;code&gt;/dev/input/by-path/&lt;/code&gt; where the legacy &#39;Joystick&#39; API
has names ending with -joystick while the &#39;evdev&#39; have names ending with
&lt;code&gt;-event-joystick&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For using the evdev API, I decided to use the libevdev library instead of using traditional &lt;code&gt;ioctl&lt;/code&gt; calls as this library provided simpler higher-level access to the evdev API.&lt;/p&gt;
&lt;p&gt;Moving on to our main goal: we want to reuse the SDL mappings. The SDL mappings look something like these:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;guid,name,mappings&amp;quot;
&amp;quot;030000006d0400001dc2000014400000,Logitech F310 Gamepad (XInput),a:b0,b:b1,back:b6,dpdown:h0.4,dpleft:h0.8,dpright:h0.2,dpup:h0.1,guide:b8,leftshoulder:b4,leftstick:b9,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b10,righttrigger:a5,rightx:a3,righty:a4,start:b7,x:b2,y:b3,&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quoting SDL documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The mapping format for joystick is:
bX - a joystick button, index X
hX.Y - hat X with value Y
aX - axis X of the joystick
Buttons can be used as a controller axis and vice versa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post we will assume that we will handle the parsing of this mapping and only need to get the indexes correctly (like &lt;code&gt;b0&lt;/code&gt;, &lt;code&gt;a2&lt;/code&gt;, etc.)&lt;/p&gt;
&lt;h2 id=&quot;generating-guid&quot; tabindex=&quot;-1&quot;&gt;Generating GUID &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/#generating-guid&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the first problem was to decipher how the GUID was generated. The GUID is an 128-bit code that is time and device independent. Its constructed using the bustype, vendor, product and version of the device. It is generated using the following code:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get_guid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;libevdev&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; dev&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; guint16 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; guid&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GINT16_TO_LE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libevdev_get_id_bustype&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GINT16_TO_LE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libevdev_get_id_vendor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GINT16_TO_LE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libevdev_get_id_product&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GINT16_TO_LE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libevdev_get_id_version&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we want it to be device independent, we use the &lt;code&gt;GINT16_TO_LE&lt;/code&gt; helper from glib to convert a 16 bit number to little endian.&lt;/p&gt;
&lt;p&gt;But to convert this to string we convert it to its hexadecimal equivalent using the following simple code:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;guid_to_string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;guint16 &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; guid&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; guidstr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; k_rgchHexToASCII&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;0123456789abcdef&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;char&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;guidstr&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; k_rgchHexToASCII&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;guidstr&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; k_rgchHexToASCII&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x0F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; guid&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;guidstr&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; k_rgchHexToASCII&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;guidstr&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; k_rgchHexToASCII&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;c &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x0F&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;guidstr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token char&quot;&gt;&#39;&#92;0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;feature-detection-and-mapping-to-the-sdl-indexes&quot; tabindex=&quot;-1&quot;&gt;Feature Detection and mapping to the SDL indexes &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/#feature-detection-and-mapping-to-the-sdl-indexes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now coming to the feature detection part. We use the helper &lt;code&gt;libevdev_has_event_code (dev, type, code)&lt;/code&gt; to detect if the device has a button/axis/hat. This way we loop over the possible values of the code for each type (&lt;code&gt;EV_KEY&lt;/code&gt; for button, &lt;code&gt;EV_ABS&lt;/code&gt; for axes and hat) and map it to an increasing number. That is the first valid axis code we found is &lt;code&gt;axis0&lt;/code&gt; or &lt;code&gt;a0&lt;/code&gt;, the second valid axis is &lt;code&gt;a1&lt;/code&gt; and so on. It is the same for buttons.&lt;/p&gt;
&lt;p&gt;For example, following is part of the code for buttons:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt; nbuttons &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
guint8 key_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;KEY_MAX&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; BTN_JOYSTICK&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; KEY_MAX&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;libevdev_has_event_code&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dev&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; EV_KEY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;%d - Joystick has button: 0x%x - %s&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; nbuttons&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;token function&quot;&gt;libevdev_event_code_get_name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;EV_KEY&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        key_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; BTN_MISC&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; nbuttons&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;nbuttons&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And while polling we find the button number through this &lt;code&gt;key_map&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-c&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-c&quot;&gt;&lt;span class=&quot;token function&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Button %d&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; key_map&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;ev&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; BTN_MISC&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We do similar stuff for axes and hats even though the way we map changes. The hats mapping like &lt;code&gt;h0.4&lt;/code&gt; can be done using a simple map from code and value. But SDL returns output as a 8-way dpad giving one of the eight values (like up, leftup, etc.) while evdev gives hat as two axes and reports two events: left and up on pressing the dpad/hat in the leftup direction.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/handling-joysticks-and-gamepads-in-linux/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For polling events we use the &lt;code&gt;libevdev_next_event&lt;/code&gt; function. The full &lt;strong&gt;libevdev documentation&lt;/strong&gt; can be found &lt;a href=&quot;https://www.freedesktop.org/software/libevdev/doc/latest/&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;full code&lt;/strong&gt; can be found &lt;a href=&quot;https://gist.github.com/meghprkh/9cdce0cd4e0f41ce93413b250a207a55&quot;&gt;here&lt;/a&gt;. While this code uses glib, it only uses simple helper functions from glib which can be easily reimplemented. The only complex glib functions used are to detect the event-joystick device from the &lt;code&gt;/dev/input/by-path&lt;/code&gt; folder. This code also doesnot have several fallbacks that the SDL code has.&lt;/p&gt;
&lt;p&gt;My future work will involve the integration of this &#39;playground&#39; code into the main GNOME Games code and also parsing the mapping. Other things that need to be done is to handle hats properly, handle fallbacks and see if we want to detect joystick devices by polling only or use udev.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>GSoC 2016: Introduction</title>
		<link href="https://meghprkh.github.io/blog/posts/gsoc-2016-introduction/"/>
		<updated>2016-05-23T17:49:03Z</updated>
		<id>https://meghprkh.github.io/blog/posts/gsoc-2016-introduction/</id>
		<content type="html">&lt;p&gt;Hello everyone, I am participating in Google Summer Of Code 2016 under the GNOME project.&lt;/p&gt;
&lt;p&gt;My project is related to an application called &lt;a href=&quot;https://wiki.gnome.org/Apps/Games/&quot;&gt;GNOME Games&lt;/a&gt;. As you can see this app serves as an catalog of games alongside an emulator. My proposal is related to adding support for gamepads/joysticks/controllers to this app. By this I mean the ability to play emulated games using the gamepad.&lt;/p&gt;
&lt;!--more--&gt;
&lt;p&gt;This proposal has plans for adding support for remappabale controls and multiple gamepads (for multi-player games). This would come with an easy to use UI.&lt;/p&gt;
&lt;p&gt;Also other stretch goals include the ability to control the &amp;quot;Games UI&amp;quot; itself using the gamepad as well as making the code reusable so that it can be used as a library. Some other stretch goals involve moving the gamepad configuration UI to control center as well as having gamepad support for the GNOME games pack itself (will start with Nibbles).&lt;/p&gt;
&lt;p&gt;Looking forward to having a great summer wherein I will put my full potential into developing this ideas with the aid of my mentor &lt;a href=&quot;https://wiki.gnome.org/AdrienPlazas&quot;&gt;Adrien Plazas&lt;/a&gt;. I will regularly post updates here.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Creating an RPM package for a PHP PEAR module</title>
		<link href="https://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/"/>
		<updated>2014-12-17T12:19:38Z</updated>
		<id>https://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/</id>
		<content type="html">&lt;p&gt;I am participating in Google Code In 2014 and two of my tasks were based on RPM packaging for Fedora.
&lt;a href=&quot;http://www.google-melange.com/gci/task/view/google/gci2014/5262603731337216&quot;&gt;The first&lt;/a&gt; was packaging &lt;a href=&quot;http://www.phalconphp.com/en/&quot;&gt;PhalconPHP&lt;/a&gt; for Fedora while &lt;a href=&quot;http://www.google-melange.com/gci/task/view/google/gci2014/5774064475963392&quot;&gt;the second&lt;/a&gt; was packaging &lt;a href=&quot;http://cakephp.org/&quot;&gt;CakePHP&lt;/a&gt;.
Phalcon is an C extension while Cake is a PEAR/Composer extension.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;I will discuss the easier of the two, Cake as it was a PEAR package.&lt;/p&gt;
&lt;p&gt;So first of all, you need to learn some RPM Packaging Basics. &lt;a href=&quot;https://fedoraproject.org/wiki/How_to_create_an_RPM_package&quot;&gt;This link&lt;/a&gt; briefly introduces us to the necessary tools and their setup. But the above link does not introduce us to &lt;a href=&quot;http://copr.fedoraproject.org/&quot;&gt;Copr&lt;/a&gt; which may be used to distribute and even build our RPMS on different platforms (we can use it as a sort of substitute for &lt;a href=&quot;https://fedoraproject.org/wiki/How_to_create_an_RPM_package#Mock_and_Koji&quot;&gt;Koji or Mock&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Then I recommend that you read [PHP Packaging wiki](&lt;a href=&quot;http://fedoraproject.org/wiki/Packaging&quot;&gt;http://fedoraproject.org/wiki/Packaging&lt;/a&gt;:&lt;/p&gt;
&lt;h2 id=&quot;the-channel-package&quot; tabindex=&quot;-1&quot;&gt;The Channel package &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/#the-channel-package&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So lets say we have identified the PEAR channel (&lt;a href=&quot;http://pear.example.org&quot;&gt;pear.example.org&lt;/a&gt;) and it is not the standard PEAR channel. So we need to create a CHANNEL package.&lt;/p&gt;
&lt;p&gt;So lets create the SPEC file :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%{!?__pear: %{expand: %%global __pear %{_bindir}/pear}}
%global pear_channel pear.example.org
%global pear_channel_name example
Name:           php-channel-%{pear_channel_name}
# Use REST version
Version:        1.3
Release:        1%{?dist}
Summary:        Adds %{pear_channel_name} channel to PEAR

Group:          Development/Languages
License:        MIT
URL:            http://%{pear_channel}
Source0:        http://%{pear_channel}/channel.xml
BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)

BuildArch:      noarch
BuildRequires:  php-pear &amp;gt;= 1:1.4.9-1.2
Requires:       php-common &amp;gt;= 5.1.4
Requires:       php-pear(PEAR)
Requires(post): %{__pear}
Requires(postun): %{__pear}
Provides:       php-channel(%{pear_channel})

%description
This package adds the %{pear_channel_name} channel which allows PEAR packages
from this channel to be installed.

%prep
%setup -q -c -T


%build
# Empty build section, nothing to build


%install
rm -rf $RPM_BUILD_ROOT
mkdir -p $RPM_BUILD_ROOT%{pear_xmldir}
install -pm 644 %{SOURCE0} $RPM_BUILD_ROOT%{pear_xmldir}/%{name}.xml


%clean
rm -rf $RPM_BUILD_ROOT


%post
if [ $1 -eq  1 ] ; then
   %{__pear} channel-add %{pear_xmldir}/%{name}.xml &amp;gt; /dev/null || :
else
   %{__pear} channel-update %{pear_xmldir}/%{name}.xml &amp;gt; /dev/null ||:
fi


%postun
if [ $1 -eq 0 ] ; then
   %{__pear} channel-delete %{pear_channel} &amp;gt; /dev/null || :
fi


%files
%defattr(-,root,root,-)
%{pear_xmldir}/%{name}.xml


%changelog
* Mon Dec 15 2014 Megh Parikh &amp;lt;meghprkh@gmail.com&amp;gt; 1.3-1
- Initial Release.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see you just need to edit a few lines (lines 2,3) to update the channel name and URL and the last lines for proper changelogs.&lt;/p&gt;
&lt;p&gt;Now you can build this spec using the &lt;code&gt;rpmbuild&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Install the generated RPM on your system (provided the build is successful).&lt;/p&gt;
&lt;h2 id=&quot;the-pear-package&quot; tabindex=&quot;-1&quot;&gt;The PEAR Package &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/#the-pear-package&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now lets head on to creating the actual SPEC file of the RPM package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First install the &lt;code&gt;php-pear-PEAR-Command-Packaging&lt;/code&gt; package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download the PEAR package from the channel (mostly &lt;em&gt;&lt;a href=&quot;http://channelname/get/name-version.tgz&quot;&gt;http://channelname/get/name-version.tgz&lt;/a&gt;&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;pear make-rpm-spec Foo.tgz&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;and a spec file will be generated for you (with all required files) â€¦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;â€¦ but if it is not from the standard PEAR channel, you will need to add the channel to the requires and modify certain lines â€¦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You may look at &lt;a href=&quot;https://gist.github.com/meghprkh/39fa65e683f36a4b3996&quot;&gt;my spec for CakePHP&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Done now You just need to build it â€¦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the build fails make sure you had installed the Channel Package&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;%global pear_name example
%global pear_channel pear.example.org
URL:            http://%{pear_channel}/package/%{pear_name}
Source0:        http://%{pear_channel}/get/%{pear_name}-%{version}.tgz
BuildRequires:  php-channel(%{pear_channel})
Requires:       php-channel(%{pear_channel})
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;the-copr-build-system&quot; tabindex=&quot;-1&quot;&gt;The Copr Build System &lt;a class=&quot;header-anchor&quot; href=&quot;https://meghprkh.github.io/blog/posts/creating-an-rpm-package-for-a-php-pear-module/#the-copr-build-system&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Lets say you have Fedora 20 on your system but you also want to build it for other Fedora and EPEL versions and also make the installation simpler for the end user. So the right tool you need to use is the &lt;a href=&quot;http://copr.fedoraproject.org/&quot;&gt;Copr&lt;/a&gt; Build System.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upload your SRPMs to some file sharing service which permits direct downloads through a link (I used GitHub but thats a bad habit for git is extremely slow with binary files (SRPMS are gzipped files)).&lt;/li&gt;
&lt;li&gt;Go to the Copr build system page.&lt;/li&gt;
&lt;li&gt;Read their wiki a little.&lt;/li&gt;
&lt;li&gt;Login and create a new repo&lt;/li&gt;
&lt;li&gt;First build the Channel package in your repo&lt;/li&gt;
&lt;li&gt;Drink some coffee. Its gonna take some time.&lt;/li&gt;
&lt;li&gt;Next build the PEAR package (build it after the first completes for it is dependent onthe channel package)&lt;/li&gt;
&lt;li&gt;Share your work.&lt;/li&gt;
&lt;li&gt;You may see my repo for &lt;a href=&quot;https://copr.fedoraproject.org/coprs/meghprkh/cakephp/&quot;&gt;copy and paste installation instructions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
</feed>
