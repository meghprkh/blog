<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ on Megh's Blog</title><link>http://meghprkh.github.io/blog/categories/c++/</link><description>Recent content in C++ on Megh's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 04 Sep 2022 00:28:10 +0100</lastBuildDate><atom:link href="http://meghprkh.github.io/blog/categories/c++/index.xml" rel="self" type="application/rss+xml"/><item><title>Force Inline in C++</title><link>http://meghprkh.github.io/blog/posts/c++-force-inline/</link><pubDate>Sun, 04 Sep 2022 00:28:10 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/c++-force-inline/</guid><description>Function calls are expensive. They require allocating a new stack frame, pushing params calling, return values. And lets not get started on calling conventions. inline, always_inline and forceinline are just hints. They dont always inline 1 2.
Trust the compiler some say. Profile your code say the others. Use macros say the old and wise.
But what if you are developing a library and need to ensure that your method gets inlined?</description></item><item><title>C++20 Concepts in C++03</title><link>http://meghprkh.github.io/blog/posts/c++03-concepts/</link><pubDate>Thu, 04 Aug 2022 01:23:11 +0100</pubDate><guid>http://meghprkh.github.io/blog/posts/c++03-concepts/</guid><description>C++20 Concepts are a new language feature that ease generic programming, but are primarily syntactic sugar.
We will try to implement them in C++03, with one caveat - we must explicitly specify that a class implements an concept.
NOTE: We will use template specialization and do not need to be able to modify the class or our concept for this.
NOTE: If it seems like the caveat ignores the entire point of concepts, call these &amp;ldquo;pseudo-minimal-rust-traits&amp;rdquo; and read on.</description></item></channel></rss>